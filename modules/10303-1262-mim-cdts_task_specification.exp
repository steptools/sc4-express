(*
  $Id$
ISO TC184/SC4/WG12 N1452 - ISO/CD-TS 10303-1262 Task specification - EXPRESS MIM
*) 


SCHEMA Task_specification_mim; 

USE FROM action_schema   -- ISO 10303-41
  (action_method,
   action_method_relationship); 

USE FROM Activity_method_assignment_mim;    -- ISO/CD-TS 10303-1249

USE FROM Activity_method_mim;    -- ISO/TS 10303-1049

USE FROM Classification_assignment_mim;    -- ISO/CD-TS 10303-1114

USE FROM Condition_mim;    -- ISO/CD-TS 10303-1253

USE FROM Group_mim;    -- ISO/CD-TS 10303-1113

USE FROM method_definition_schema   -- ISO 10303-49
  (action_method_to_select_from,
   concurrent_action_method,
   relationship_condition,
   sequential_method,
   serial_action_method); 

USE FROM State_definition_mim;    -- ISO/CD-TS 10303-1255

USE FROM State_observed_mim;    -- ISO/CD-TS 10303-1256

USE FROM state_observed_schema;    -- ISO 10303-56

USE FROM state_type_schema;    -- ISO 10303-56


TYPE task_classification_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (action_method, 
    action_method_relationship, 
    applied_action_method_assignment, 
    applied_state_assignment, 
    applied_state_type_assignment);
END_TYPE; 

TYPE task_specification_groupable_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON groupable_item WITH 
   (action_method, 
    action_method_relationship);
END_TYPE; 

TYPE task_state_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_of_item WITH 
   (action_method);
END_TYPE; 

TYPE task_state_type_of_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON state_type_of_item WITH 
   (action_method);
END_TYPE; 

ENTITY advisory_task_method
  SUBTYPE OF (task_method);
END_ENTITY;

ENTITY concurrent_task_method
  SUBTYPE OF (task_method);
END_ENTITY;

ENTITY end_task
  SUBTYPE OF (task_method);
END_ENTITY;

ENTITY exit_loop
  SUBTYPE OF (task_method);
END_ENTITY;

ENTITY looping_method
  SUBTYPE OF (task_method);
END_ENTITY;

ENTITY simultaneous_task_method
  SUBTYPE OF (concurrent_task_method);
END_ENTITY;

ENTITY task
  SUBTYPE OF (action_method);
END_ENTITY;

ENTITY task_invocation
  SUBTYPE OF (task_method);
END_ENTITY;

ENTITY task_method
  SUBTYPE OF (action_method);
END_ENTITY;

ENTITY task_method_sequence
  SUBTYPE OF (task_method);
END_ENTITY;

ENTITY task_result
  SUBTYPE OF (action_method);
END_ENTITY;

ENTITY task_step
  SUBTYPE OF (task_method);
END_ENTITY;

SUBTYPE_CONSTRAINT restrict_task_action_method_subtypes FOR action_method;
  ONEOF (task,
         task_method,
         task_result);
END_SUBTYPE_CONSTRAINT;

SUBTYPE_CONSTRAINT restrict_task_method_subtypes FOR task_method;
  ONEOF (advisory_task_method,
         concurrent_task_method,
         end_task,
         exit_loop,
         looping_method,
         task_invocation,
         task_method_sequence,
         task_step);
END_SUBTYPE_CONSTRAINT;

END_SCHEMA;  -- Task_specification_mim


