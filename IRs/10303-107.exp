SCHEMA action_and_model_relationships_schema;

  REFERENCE FROM support_resource_schema
    (identifier,
    label,
    text);
  REFERENCE FROM action_schema
    (action);
  REFERENCE FROM finite_element_analysis_control_and_result_schema
    (analysis_step);
  REFERENCE FROM product_analysis_schema.htm#product_analysis_schema
    (physical_action_domain);
  REFERENCE FROM analysis_schema
    (model_action_domain);

TYPE idealised_action_select = EXTENSIBLE SELECT (
  action,
  physical_action_domain);
END_TYPE;

TYPE discretised_action_model_select = EXTENSIBLE SELECT (
  analysis_step,
  model_action_domain);
END_TYPE;

ENTITY action_view_relationship;
  id                 :  identifier;
  name               :  label;
  description        :  OPTIONAL text; 
  idealised_action   :  idealised_action_select;
  discretised_model  :  discretised_action_model_select;
END_ENTITY;

ENTITY same_discretised_action_model;
  id                  :  identifier;
  name                :  label;
  description         :  OPTIONAL text;
  equivalent_records  :  SET [2:?] OF discretised_action_model_select;
END_ENTITY;

ENTITY same_idealised_action;
  id                  :  identifier;
  name                :  label;
  description         :  OPTIONAL text; 
  equivalent_records  :  SET [2:?] OF idealised_action_select;
END_ENTITY;

END_SCHEMA;

SCHEMA fea_definition_relationships_schema;

  REFERENCE FROM support_resource_schema
    (identifier,
    label,
    text);
  REFERENCE FROM product_property_definition_schem
    (property_definition,
    general_property);
  REFERENCE FROM topology_schema
    (topological_representation_item);
  REFERENCE FROM structural_response_representation_schema
    (analysis_item_within_representation,
    consistent_element_reference,
    curve_element_section_definition,
    element_aspect,
    element_representation,
    fea_model,
    node_representation,
    surface_section,
    surface_section_field);

ENTITY element_topological_relationship;
  element_ref  :  element_representation;
  item         :  analysis_item_within_representation;
  aspect       :  element_aspect;
WHERE
  topology_referenced  :  
    'TOPOLOGY_SCHEMA.TOPOLOGICAL_REPRESENTATION_ITEM' IN TYPEOF (item.item);
  consistent_topology  :  
    consistent_topological_reference (aspect, item.item);
  valid_aspect         :  
    consistent_element_reference (aspect, element_ref);
END_ENTITY;

ENTITY fea_beam_section_idealisation_relationship;
  id           :  identifier;
  name         :  label;
  description  :  OPTIONAL text; 
  idealising   :  curve_element_section_definition;
  idealised    :  general_property;
END_ENTITY;

ENTITY fea_model_topological_relationship;
  model_ref  :  fea_model;
  item       :  analysis_item_within_representation;
WHERE
  mesh_referenced  :  
    'TOPOLOGICAL_DEFINITION_AND_MESH_SCHEMA.MESH' IN TYPEOF (item.item);
END_ENTITY;

ENTITY fea_shell_section_distribution_idealisation_relationship;
  id           :  identifier;
  name         :  label;
  description  :  OPTIONAL text; 
  idealising   :  surface_section_field;
  idealised    :  property_definition;
END_ENTITY;

ENTITY fea_shell_section_idealisation_relationship;
  id           :  identifier;
  name         :  label;
  description  :  OPTIONAL text; 
  idealising   :  surface_section;
  idealised    :  general_property;
END_ENTITY;

ENTITY node_topological_relationship;
  node_ref  :  node_representation;
  item      :  analysis_item_within_representation;
WHERE
  vertex_referenced  :  'TOPOLOGY_SCHEMA.VERTEX' IN TYPEOF (item.item);
END_ENTITY;

FUNCTION consistent_topological_reference (
  aspect    :  GENERIC;
  item      :  topological_representation_item) : BOOLEAN;

    LOCAL
      status : BOOLEAN;
      srrs   : STRING;
    END_LOCAL;
    
    status := FALSE;
    srrs := 'STRUCTURAL_RESPONSE_REPRESENTATION_SCHEMA.';
    
    IF (srrs + 'ELEMENT_VOLUME') IN TYPEOF(aspect) THEN
      IF 'TOPOLOGY_SCHEMA.CLOSED_SHELL' IN TYPEOF(item) THEN
        status := TRUE;
      END_IF;
    END_IF;
    
    IF (srrs + 'VOLUME_3D_FACE') IN TYPEOF(aspect) THEN
      IF 'TOPOLOGY_SCHEMA.FACE' IN TYPEOF(item) THEN
        status := TRUE;
      END_IF;
    END_IF;
    
    IF (srrs + 'VOLUME_2D_FACE') IN TYPEOF(aspect) THEN
      IF 'TOPOLOGY_SCHEMA.EDGE' IN TYPEOF(item) THEN
        status := TRUE;
      END_IF;
    END_IF;
    
    IF (srrs + 'SURFACE_3D_FACE') IN TYPEOF(aspect) THEN
      IF 'TOPOLOGY_SCHEMA.FACE' IN TYPEOF(item) THEN
        status := TRUE;
      END_IF;
    END_IF;
    
    IF (srrs + 'SURFACE_2D_FACE') IN TYPEOF(aspect) THEN
      IF 'TOPOLOGY_SCHEMA.EDGE' IN TYPEOF(item) THEN
        status := TRUE;
      END_IF;
    END_IF;
    
    IF (srrs + 'VOLUME_3D_EDGE') IN TYPEOF(aspect) THEN
      IF 'TOPOLOGY_SCHEMA.EDGE' IN TYPEOF(item) THEN
        status := TRUE;
      END_IF;
    END_IF;
    
    IF (srrs + 'VOLUME_2D_EDGE') IN TYPEOF(aspect) THEN
      IF 'TOPOLOGY_SCHEMA.VERTEX' IN TYPEOF(item) THEN
        status := TRUE;
      END_IF;
    END_IF;
    
    IF (srrs + 'SURFACE_3D_EDGE') IN TYPEOF(aspect) THEN
      IF 'TOPOLOGY_SCHEMA.EDGE' IN TYPEOF(item) THEN
        status := TRUE;
      END_IF;
    END_IF;

    IF (srrs + 'SURFACE_2D_EDGE') IN TYPEOF(aspect) THEN
      IF 'TOPOLOGY_SCHEMA.VERTEX' IN TYPEOF(item) THEN
        status := TRUE;
      END_IF;
    END_IF;
    
    IF (srrs + 'CURVE_EDGE') IN TYPEOF(aspect) THEN
      IF 'TOPOLOGY_SCHEMA.EDGE' IN TYPEOF(item) THEN
        status := TRUE;

      END_IF;
    END_IF;

    IF 'TOPOLOGICAL_DEFINITION_AND_MESH_SCHEMA.TOPOLOGICAL_REGION' IN TYPEOF(item) THEN
      status := TRUE;
    END_IF;
  
  RETURN(status);

  END_FUNCTION;

END_SCHEMA;

SCHEMA product_and_model_relationships_schema;

  REFERENCE FROM support_resource_schema
    (identifier,
    label,
    text);
  REFERENCE FROM product_definition_schema
    (product_definition);
  REFERENCE FROM structural_response_representation_schema
    (fea_model);
  REFERENCE FROM product_analysis_schema.htm#product_analysis_schema
    (physical_product_domain);
  REFERENCE FROM analysis_schema
    (model_product_domain);

TYPE idealised_product_select = EXTENSIBLE SELECT (
  product_definition,
  physical_product_domain);
END_TYPE;

TYPE discretised_product_model_select = EXTENSIBLE SELECT (
  fea_model,
  model_product_domain);
END_TYPE;

ENTITY product_view_relationship;
  id                 :  identifier;
  name               :  label;
  description        :  OPTIONAL text; 
  idealised_product  :  idealised_product_select;
  discretised_model  :  discretised_product_model_select;
END_ENTITY;

ENTITY same_discretised_product_model;
  id                  :  identifier;

  name                :  label;
  description         :  OPTIONAL text; 
  equivalent_records  :  SET [2:?] OF discretised_product_model_select;
END_ENTITY;

ENTITY same_idealised_product;
  id                  :  identifier;
  name                :  label;
  description         :  OPTIONAL text; 
  equivalent_records  :  SET [2:?] OF idealised_product_select;
END_ENTITY;

END_SCHEMA;

SCHEMA state_and_model_relationships_schema;

  REFERENCE FROM support_resource_schema
    (identifier,
    label,
    text);
  REFERENCE FROM state_type_schema
    (state_type);
  REFERENCE FROM finite_element_analysis_control_and_result_schema
    (state);
  REFERENCE FROM product_analysis_schema.htm#product_analysis_schema
    (physical_state_domain);
  REFERENCE FROM analysis_schema
    (model_state_domain);

TYPE idealised_state_select = EXTENSIBLE SELECT (
  state_type,
  physical_state_domain);
END_TYPE;

TYPE discretised_state_model_select = EXTENSIBLE SELECT (
  state,
  model_state_domain);
END_TYPE;

ENTITY state_view_relationship;
  id                 :  identifier;
  name               :  label;
  description        :  OPTIONAL text; 
  idealised_state    :  idealised_state_select;
  discretised_model  :  discretised_state_model_select;
END_ENTITY;

ENTITY same_discretised_state_model;
  id                  :  identifier;
  name                :  label;
  description         :  OPTIONAL text; 
  equivalent_records  :  SET [2:?] OF discretised_state_model_select;
END_ENTITY;

ENTITY same_idealised_state;
  id                  :  identifier;
  name                :  label;
  description         :  OPTIONAL text; 
  equivalent_records  :  SET [2:?] OF idealised_state_select;
END_ENTITY;

END_SCHEMA;
