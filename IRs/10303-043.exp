
SCHEMA representation_schema;

REFERENCE FROM support_resource_schema
    (identifier,
     label,
     text,
     bag_to_set);

REFERENCE FROM measure_schema
    (measure_with_unit);

TYPE transformation = SELECT
  (item_defined_transformation,
   functionally_defined_transformation);
END_TYPE;

ENTITY uncertainty_measure_with_unit
  SUBTYPE OF (measure_with_unit);
  name        : label;
  description : text;
WHERE
  WR1: (NOT ('NUMBER' IN TYPEOF
       (SELF\measure_with_unit.value_component))) OR
       (SELF\measure_with_unit.value_component >= 0);
END_ENTITY;

ENTITY representation_context;
  context_identifier : identifier;
  context_type       : text;
INVERSE
  representations_in_context : SET [1:?] OF representation
    FOR context_of_items;
END_ENTITY;

ENTITY global_uncertainty_assigned_context
  SUBTYPE OF (representation_context);
  uncertainty : SET [1:?] OF uncertainty_measure_with_unit;
END_ENTITY;

ENTITY representation_item;
  name : label;
WHERE
  WR1: SIZEOF(using_representations(SELF)) > 0;
END_ENTITY;

ENTITY representation;
  name             : label;
  items            : SET[1:?] OF representation_item;
  context_of_items : representation_context;
END_ENTITY;

ENTITY representation_relationship;
  name        : label;
  description : text;
  rep_1       : representation;
  rep_2       : representation;
END_ENTITY;

ENTITY item_defined_transformation;
  name             : label;
  description      : text;
  transform_item_1 : representation_item;
  transform_item_2 : representation_item;
END_ENTITY;

ENTITY functionally_defined_transformation;
  name        : label;
  description : text;
END_ENTITY;

ENTITY representation_relationship_with_transformation
  SUBTYPE OF (representation_relationship);
  transformation_operator : transformation;
WHERE
  WR1:
   SELF\representation_relationship.rep_1.context_of_items
   :<>: SELF\representation_relationship.rep_2.context_of_items;
END_ENTITY;

ENTITY representation_map;
  mapping_origin        : representation_item;
  mapped_representation : representation;
INVERSE
  map_usage : SET[1:?] OF mapped_item FOR mapping_source;
WHERE
  WR1: item_in_context(SELF.mapping_origin,
       SELF.mapped_representation.context_of_items);
END_ENTITY;

ENTITY mapped_item
  SUBTYPE OF (representation_item);
  mapping_source : representation_map;
  mapping_target : representation_item;
WHERE
  WR1: acyclic_mapped_representation(using_representations(SELF), [SELF]);
END_ENTITY;

ENTITY definitional_representation
  SUBTYPE OF ( representation );
WHERE
  WR1: 'REPRESENTATION_SCHEMA.PARAMETRIC_REPRESENTATION_CONTEXT' IN 
        TYPEOF( SELF\representation.context_of_items );
END_ENTITY;

ENTITY parametric_representation_context
  SUBTYPE OF (representation_context);
END_ENTITY;

FUNCTION acyclic_mapped_representation
  (parent_set   : SET OF representation;
   children_set : SET OF representation_item) : BOOLEAN;
  LOCAL
    x,y : SET OF representation_item;
    i   : INTEGER;
  END_LOCAL;

  -- Determine the subset of children_set that are mapped_items.

  x := QUERY(z <* children_set | 'REPRESENTATION_SCHEMA.MAPPED_ITEM'
       IN TYPEOF(z));

  -- Determine that the subset has elements.

  IF SIZEOF(x) > 0 THEN

    -- Check each element of the set.

    REPEAT i := 1 TO HIINDEX(x);

      -- If the selected element maps a representation in the
      --  parent_set, then return false.

      IF x[i]\mapped_item.mapping_source.mapped_representation
        IN parent_set THEN
        RETURN (FALSE);
      END_IF;

      -- Recursive check of the items of mapped_rep.
      IF NOT acyclic_mapped_representation
        (parent_set + x[i]\mapped_item.mapping_source.mapped_representation,
        x[i]\mapped_item.mapping_source.mapped_representation.items) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
  END_IF;

  -- Determine the subset of children_set that are not
  -- mapped_items.

  x := children_set - x;

  -- Determine that the subset has elements.

  IF SIZEOF(x) > 0 THEN

    -- For each element of the set:

    REPEAT i := 1 TO HIINDEX(x);

      -- Determine the set of representation_items referenced.

      y := QUERY(z <* bag_to_set( USEDIN(x[i], '')) |
           'REPRESENTATION_SCHEMA.REPRESENTATION_ITEM' IN TYPEOF(z));

      -- Recursively check for an offending mapped_item.
      -- Return false for any errors encountered.

      IF NOT acyclic_mapped_representation(parent_set, y) THEN
        RETURN (FALSE);
      END_IF;
    END_REPEAT;
  END_IF;

  -- Return true when all elements are checked and
  -- no error conditions found.
  RETURN (TRUE);
END_FUNCTION;

FUNCTION item_in_context
  (item  : representation_item;
   cntxt : representation_context) : BOOLEAN;
  LOCAL
    i : INTEGER;
    y : BAG OF representation_item;
  END_LOCAL;

  -- If there is one or more representation using both the item 
  -- and cntxt return true.
 
  IF SIZEOF(USEDIN(item,'REPRESENTATION_SCHEMA.REPRESENTATION.ITEMS')
    * cntxt.representations_in_context) > 0 THEN
    RETURN (TRUE);

    -- Determine the bag of representation_items that reference
    -- item.

    ELSE
    y := QUERY(z <* USEDIN (item , '') |
         'REPRESENTATION_SCHEMA.REPRESENTATION_ITEM' IN TYPEOF(z));
  
     -- Ensure that the set is not empty.

      IF SIZEOF(y) > 0 THEN
  
      -- For each element in the set

      REPEAT i := 1 TO HIINDEX(y);
  
        -- Check to see it is an item in the input cntxt.

        IF item_in_context(y[i], cntxt) THEN
          RETURN (TRUE);
        END_IF;
      END_REPEAT;
    END_IF;
  END_IF;

  -- Return false when all possible branches have been checked
  -- with no success.
  RETURN (FALSE);
END_FUNCTION;

FUNCTION using_representations (item : representation_item)
  : SET OF representation;
  LOCAL
    results            : SET OF representation;
    result_bag         : BAG OF representation;
    intermediate_items : SET OF representation_item;
    i                  : INTEGER;
  END_LOCAL;

  -- Find the representations in which the item is used and add to the 
  -- results set.

  result_bag := USEDIN(item,'REPRESENTATION_SCHEMA.REPRESENTATION.ITEMS');

  IF SIZEOF(result_bag) > 0 THEN
    REPEAT i := 1 TO HIINDEX(result_bag);
      results := results + result_bag[i];
    END_REPEAT;
  END_IF;

  -- Find the set of representation_items in which item is used.

  intermediate_items := QUERY(z <* bag_to_set( USEDIN(item , '')) |
    'REPRESENTATION_SCHEMA.REPRESENTATION_ITEM' IN TYPEOF(z));

  -- If the set of intermediate items is not empty;

  IF SIZEOF(intermediate_items) > 0 THEN

    -- For each element in the set, recursively add the 
    -- using_representations of that element.

    REPEAT i := 1 TO HIINDEX(intermediate_items);
      results := results + using_representations(intermediate_items[i]);
    END_REPEAT;
  END_IF;

  -- Return the set of representation in which the input item is
  -- used directly and indirectly (through intervening representation_items).

  RETURN (results);
END_FUNCTION;

END_SCHEMA; -- representation_schema
