(* THIS DOCUMENT IS ISO TC184/SC4/WG12 N4476 *)

SCHEMA PRODUCT_DATA_QUALITY_CRITERIA_SCHEMA;
  REFERENCE FROM REPRESENTATION_SCHEMA
    (representation,
     representation_item);
  REFERENCE FROM SUPPORT_RESOURCE_SCHEMA (text);
  REFERENCE FROM PERSON_ORGANIZATION_SCHEMA (person);
  REFERENCE FROM DATE_TIME_SCHEMA (date_and_time);
  REFERENCE FROM PRODUCT_DATA_QUALITY_INSPECTION_RESULT_SCHEMA
    (data_quality_inspection_result_representation);

  TYPE data_quality_report_type = ENUMERATION OF
    (NO_REPORT_REQUIRED,
     SUMMARY_REPORT,
     REPORT_FOR_INDIVIDUAL_ELEMENT_MEASURED,
     REPORT_FOR_INDIVIDUAL_ELEMENT_VIOLATED);
  END_TYPE;

  ENTITY data_quality_criteria_representation
    SUBTYPE OF(representation);
      creator          : person;
      date_of_creation : date_and_time;
      discipline_type  : text;
    WHERE
      WR1 :  SIZEOF( QUERY( q <* SELF\representation.items|
                                'PRODUCT_DATA_QUALITY_REPRESENTATION_SCHEMA.' +
                                'DATA_QUALITY_CRITERION' IN TYPEOF(q))) > 0;
  END_ENTITY;

  ENTITY data_quality_criterion
    SUBTYPE OF(representation_item);
      report_request_types : SET [1:2] OF data_quality_report_type;
    WHERE
      WR1 : SIZEOF(USEDIN(SELF,
            'PRODUCT_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
            'DATA_QUALITY_INSPECTION_RESULT_REPRESENTATION.ITEMS')
            )=0;
  END_ENTITY;

  ENTITY data_quality_criterion_with_specification
    SUBTYPE OF(data_quality_criterion);
      assessment_method         : data_quality_assessment_method;
      measurement_requirement : data_quality_measurement_requirement;
  END_ENTITY;

  ENTITY data_quality_assessment_method;
      description : text;
  END_ENTITY;

  ENTITY data_quality_measurement_requirement
    SUBTYPE OF(representation_item);
    WHERE
      WR1 : SIZEOF(USEDIN(SELF,
            'PRODUCT_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
            'DATA_QUALITY_INSPECTION_RESULT_REPRESENTATION.ITEMS')
            )=0;
  END_ENTITY;

END_SCHEMA;



SCHEMA PRODUCT_DATA_QUALITY_INSPECTION_RESULT_SCHEMA;
  REFERENCE FROM REPRESENTATION_SCHEMA
    (representation,
     representation_item);
  REFERENCE FROM PRODUCT_DATA_QUALITY_CRITERIA_SCHEMA
    (data_quality_criteria_representation,
     data_quality_criterion);
  REFERENCE FROM SUPPORT_RESOURCE_SCHEMA (label);
  REFERENCE FROM DATE_TIME_SCHEMA (date_and_time);
  REFERENCE FROM PERSON_ORGANIZATION_SCHEMA (person);
  REFERENCE FROM PRODUCT_DEFINITION_SCHEMA
    (product_definition);

  ENTITY data_quality_inspection_result_representation
    SUBTYPE OF(representation);
      check_tool_name    : label;
      check_tool_version : label;
      criteria_inspected : data_quality_criteria_representation;
      date_of_inspection : date_and_time;
      inspector          : person;
    WHERE
      WR1 : SIZEOF( QUERY( q <* SELF\representation.items|
                              'PRODUCT_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.' +
                              'DATA_QUALITY_INSPECTION_RESULT' IN TYPEOF(q))) > 0;
  END_ENTITY;

  ENTITY data_quality_inspection_result
    SUBTYPE OF(representation_item);
      criterion_inspected : data_quality_criterion;
    WHERE
      WR1 : SIZEOF(USEDIN(SELF,
            'PRODUCT_DATA_QUALITY_CRITERIA_SCHEMA.'+
            'DATA_QUALITY_CRITERIA_REPRESENTATION.ITEMS')
            )=0;
  END_ENTITY;

  ENTITY data_quality_inspection_result_with_judgement
    SUBTYPE OF(data_quality_inspection_result);
      judgement : BOOLEAN;
  END_ENTITY;

  ENTITY data_quality_inspection_report
    SUBTYPE OF(representation_item);
      inspection_result : data_quality_inspection_result;
    WHERE
      WR1 : SIZEOF(USEDIN(SELF,
            'PRODUCT_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'DATA_QUALITY_CRITERIA_REPRESENTATION.ITEMS')
            )=0;
  END_ENTITY;

  ENTITY data_quality_inspection_summary_report
    SUBTYPE OF(data_quality_inspection_report);
      number_of_inspected_instances : INTEGER;
      number_of_violations          : INTEGER;
  END_ENTITY;

  ENTITY data_quality_inspection_report_for_individual_element
    SUBTYPE OF(data_quality_inspection_report);
  END_ENTITY;

  ENTITY data_quality_inspected_product_data_and_result_relationship;
      inspected_product_definition     : product_definition;
      inspection_result_representation :
                           data_quality_inspection_result_representation;
  END_ENTITY;

END_SCHEMA;



SCHEMA SHAPE_DATA_QUALITY_CRITERIA_SCHEMA;
  REFERENCE FROM PRODUCT_DATA_QUALITY_CRITERIA_SCHEMA
    (data_quality_criteria_representation,
     data_quality_criterion_with_specification,
     data_quality_measurement_requirement,
     data_quality_assessment_method);
  REFERENCE FROM MEASURE_SCHEMA
    (length_unit,
     area_unit,
     plane_angle_unit,
     ratio_unit,
     volume_unit);
  REFERENCE FROM SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA
    (shape_data_quality_inspection_report_for_individual_element,
     report_for_individual_shape_element_with_extreme_instances,
     shape_data_quality_inspection_summary_report,
     shape_inspection_summary_report_with_accuracy,
     curvature_unit);
  REFERENCE FROM MATHEMATICAL_FUNCTIONS_SCHEMA
    (real_interval_to_max,
     finite_real_interval,
     integer_interval_from_min,
     real_interval_from_min,
     integer_interval_to_max,
     finite_integer_interval);
  REFERENCE FROM SUPPORT_RESOURCE_SCHEMA(text);
  REFERENCE FROM PRODUCT_DATA_QUALITY_INSPECTION_RESULT_SCHEMA
    (data_quality_inspection_result_representation);

  TYPE selection_criterion = ENUMERATION OF
    (EXTREMITY_ORDER,
     DETECTED_ORDER);
  END_TYPE;

  TYPE unit_select = SELECT
    (volume_unit,
     ratio_unit,
     plane_angle_unit,
     length_unit,
     area_unit,
     curvature_unit);
  END_TYPE;

  TYPE interval_select = SELECT
    (real_interval_to_max,
     real_interval_from_min,
     finite_real_interval,
     integer_interval_from_min,
     integer_interval_to_max,
     finite_integer_interval);
  END_TYPE;

  ENTITY shape_data_quality_criteria_representation
    SUBTYPE OF(data_quality_criteria_representation);
    WHERE
      WR1 : SIZEOF( QUERY( q <* SELF\representation.items|
                               'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                               'SHAPE_DATA_QUALITY_CRITERION' IN TYPEOF(q))) > 0;
  END_ENTITY;

  ENTITY shape_criteria_representation_with_accuracy
    SUBTYPE OF(shape_data_quality_criteria_representation);
      required_general_accuracy : SET [1:?] OF shape_measurement_accuracy;
  END_ENTITY;

  ENTITY shape_data_quality_criterion
    SUPERTYPE OF (shape_criterion_with_element_report_request
                      ANDOR
                     ONEOF(erroneous_data, inapt_data, overcomplex_data))
    SUBTYPE OF(data_quality_criterion_with_specification);
  END_ENTITY;

  ENTITY shape_criterion_with_element_report_request
    SUBTYPE OF(shape_data_quality_criterion);
      number_of_data      : INTEGER;
      selection_criterion : selection_criterion;
  END_ENTITY;

  ENTITY shape_data_quality_assessment_by_logical_test
    SUBTYPE OF(data_quality_assessment_method);
  END_ENTITY;

  ENTITY shape_data_quality_assessment_by_single_numerical_test
    SUBTYPE OF(data_quality_assessment_method);
      threshold : shape_data_quality_value_range;
  END_ENTITY;

  ENTITY shape_data_quality_assessment_by_pair_of_numerical_test
    SUBTYPE OF(data_quality_assessment_method);
      threshold_1 : shape_data_quality_value_range;
      threshold_2 : shape_data_quality_value_range;
  END_ENTITY;

  ENTITY shape_data_quality_measurement_requirement
    SUPERTYPE OF (shape_measurement_requirement_with_accuracy
                     ANDOR
                     ONEOF(erroneous_data_measurement_requirement,
                            inapt_data_measurement_requirement,
                            overcomplex_data_measurement_requirement))
    SUBTYPE OF(data_quality_measurement_requirement);
  END_ENTITY;

  ENTITY shape_measurement_requirement_with_accuracy
    SUBTYPE OF(shape_data_quality_measurement_requirement);
      required_specific_accuracy : shape_measurement_accuracy;
  END_ENTITY;

  ENTITY shape_measurement_accuracy;
      description : text;
      range       : shape_data_quality_value_range;
  END_ENTITY;

  ENTITY shape_data_quality_value_range;
      range_component : interval_select;
  END_ENTITY;

  ENTITY value_range_with_unit
    SUBTYPE OF(shape_data_quality_value_range);
      unit_component : unit_select;
  END_ENTITY;

  ENTITY length_measure_value_range_with_unit
    SUBTYPE OF(value_range_with_unit);
    WHERE
      WR1 : 'MEASURE_SCHEMA.LENGTH_UNIT' IN TYPEOF
            (SELF\value_range_with_unit.unit_component);
  END_ENTITY;

  ENTITY plane_angle_measure_value_range_with_unit
    SUBTYPE OF(value_range_with_unit);
    WHERE
      WR1 : 'MEASURE_SCHEMA.PLANE_ANGLE_UNIT' IN TYPEOF
            (SELF\value_range_with_unit.unit_component);
  END_ENTITY;

  ENTITY area_measure_value_range_with_unit
    SUBTYPE OF(value_range_with_unit);
    WHERE
      WR1 : 'MEASURE_SCHEMA.AREA_UNIT' IN TYPEOF
            (SELF\value_range_with_unit.unit_component);
  END_ENTITY;

  ENTITY volume_measure_value_range_with_unit
    SUBTYPE OF(value_range_with_unit);
    WHERE
      WR1 : 'MEASURE_SCHEMA.VOLUME_UNIT' IN TYPEOF
            (SELF\value_range_with_unit.unit_component);
  END_ENTITY;

  ENTITY ratio_measure_value_range_with_unit
    SUBTYPE OF(value_range_with_unit);
    WHERE
      WR1 : 'MEASURE_SCHEMA.RATIO_UNIT' IN TYPEOF
            (SELF\value_range_with_unit.unit_component);
  END_ENTITY;

  ENTITY curvature_measure_value_range_with_unit
    SUBTYPE OF(value_range_with_unit);
    WHERE
      WR1 : 'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
            'CURVATURE_UNIT' IN TYPEOF
            (SELF\value_range_with_unit.unit_component);
  END_ENTITY;

  ENTITY parameter_space_value_range
    SUBTYPE OF(shape_data_quality_value_range);
    WHERE
      WR1 : ('MATHEMATICAL_FUNCTIONS_SCHEMA.'+
            'FINITE_REAL_INTERVAL' IN TYPEOF
            (SELF\shape_data_quality_value_range.range_component))
            OR
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.'+
            'REAL_INTERVAL_TO_MAX' IN TYPEOF
            (SELF\shape_data_quality_value_range.range_component))
            OR
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.'+
            'REAL_INTERVAL_FROM_MIN' IN TYPEOF
            (SELF\shape_data_quality_value_range.range_component));
  END_ENTITY;

  ENTITY integer_value_range
    SUBTYPE OF(shape_data_quality_value_range);
    WHERE
      WR1 : ('MATHEMATICAL_FUNCTIONS_SCHEMA.'+
            'FINITE_INTEGER_INTERVAL' IN TYPEOF
            (SELF\shape_data_quality_value_range.range_component))
            OR
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.'+
            'INTEGER_INTERVAL_TO_MAX' IN TYPEOF
            (SELF\shape_data_quality_value_range.range_component))
            OR
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.'+
            'INTEGER_INTERVAL_FROM_MIN' IN TYPEOF
            (SELF\shape_data_quality_value_range.range_component));
  END_ENTITY;

  ENTITY erroneous_data
    ABSTRACT SUPERTYPE OF (ONEOF(
      erroneous_topology, erroneous_geometry, 
      erroneous_topology_and_geometry_relationship,      
      erroneous_manifold_solid_brep
    ))
    SUBTYPE OF(shape_data_quality_criterion);
  END_ENTITY;

  ENTITY erroneous_data_measurement_requirement
    ABSTRACT SUPERTYPE OF (ONEOF(
      erroneous_topology_mr, erroneous_geometry_mr, 
      erroneous_topology_and_geometry_relationship_mr,
      erroneous_manifold_solid_brep_mr
    ))
    SUBTYPE OF(shape_data_quality_measurement_requirement);
  END_ENTITY;

  ENTITY erroneous_topology
    ABSTRACT SUPERTYPE OF (ONEOF(
      open_edge_loop, open_closed_shell,
      inconsistent_adjacent_face_normals))
    SUBTYPE OF(erroneous_data);
  END_ENTITY;

  ENTITY erroneous_topology_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      open_edge_loop_mr,
      open_closed_shell_mr,
      inconsistent_adjacent_face_normals_mr))
    SUBTYPE OF(erroneous_data_measurement_requirement);
  END_ENTITY;

  ENTITY open_edge_loop
    SUBTYPE OF(erroneous_topology);
      SELF\data_quality_criterion_with_specification.assessment_method     : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
          measurement_requirement:
        open_edge_loop_mr;
  END_ENTITY;

  ENTITY open_edge_loop_mr
    SUBTYPE OF(erroneous_topology_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.EDGE_LOOP']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['TOPOLOGY_SCHEMA.ORIENTED_EDGE']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY open_closed_shell
    SUBTYPE OF(erroneous_topology);
      SELF\data_quality_criterion_with_specification.assessment_method      :
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement: open_closed_shell_mr;
  END_ENTITY;

  ENTITY open_closed_shell_mr
    SUBTYPE OF(erroneous_topology_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.CLOSED_SHELL']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['TOPOLOGY_SCHEMA.EDGE_CURVE']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY inconsistent_adjacent_face_normals
    SUBTYPE OF(erroneous_topology);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement: inconsistent_adjacent_face_normals_mr;
  END_ENTITY;

  ENTITY inconsistent_adjacent_face_normals_mr
    SUBTYPE OF(erroneous_topology_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'CLOSED_OR_OPEN_SHELL_SELECT']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['TOPOLOGY_SCHEMA.EDGE_CURVE']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY erroneous_geometry
    ABSTRACT SUPERTYPE OF (ONEOF(
      inconsistent_curve_transition_code,
      erroneous_b_spline_curve_definition, 
      inconsistent_surface_transition_code, 
      erroneous_b_spline_surface_definition))
    SUBTYPE OF(erroneous_data);
  END_ENTITY;

  ENTITY erroneous_geometry_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      inconsistent_curve_transition_code_mr, 
      erroneous_b_spline_curve_definition_mr, 
      inconsistent_surface_transition_code_mr, 
      erroneous_b_spline_surface_definition_mr))
    SUBTYPE OF(erroneous_data_measurement_requirement);
  END_ENTITY;

  ENTITY inconsistent_curve_transition_code
    SUBTYPE OF(erroneous_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method     : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : inconsistent_curve_transition_code_mr;
  END_ENTITY;

  ENTITY inconsistent_curve_transition_code_mr
    SUBTYPE OF(erroneous_geometry_mr);
      angle_tolerance     : plane_angle_measure_value_range_with_unit;
      curvature_tolerance : curvature_measure_value_range_with_unit;
      distance_tolerance  : length_measure_value_range_with_unit;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.COMPOSITE_CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'COMPOSITE_CURVE_TRANSITION_LOCATOR']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY erroneous_b_spline_curve_definition
    SUBTYPE OF(erroneous_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : erroneous_b_spline_curve_definition_mr;
  END_ENTITY;

  ENTITY erroneous_b_spline_curve_definition_mr
    SUBTYPE OF(erroneous_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
  END_ENTITY;

  ENTITY inconsistent_surface_transition_code
    SUBTYPE OF(erroneous_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method     : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : inconsistent_surface_transition_code_mr;
  END_ENTITY;

  ENTITY inconsistent_surface_transition_code_mr
    SUBTYPE OF(erroneous_geometry_mr);
      angle_tolerance     : plane_angle_measure_value_range_with_unit;
      curvature_tolerance : curvature_measure_value_range_with_unit;
      distance_tolerance  : length_measure_value_range_with_unit;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.RECTANGULAR_COMPOSITE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'RECTANGULAR_COMPOSITE_SURFACE_TRANSITION_LOCATOR']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY erroneous_b_spline_surface_definition
    SUBTYPE OF(erroneous_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method     : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : erroneous_b_spline_surface_definition_mr;
  END_ENTITY;

  ENTITY erroneous_b_spline_surface_definition_mr
    SUBTYPE OF(erroneous_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY erroneous_topology_and_geometry_relationship
    ABSTRACT SUPERTYPE OF (ONEOF(
      inconsistent_edge_and_curve_directions,
      inconsistent_face_and_surface_normals, 
      inconsistent_face_and_closed_shell_normals))
    SUBTYPE OF(erroneous_data);
  END_ENTITY;

  ENTITY erroneous_topology_and_geometry_relationship_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      inconsistent_face_and_surface_normals_mr, 
      inconsistent_edge_and_curve_directions_mr, 
      inconsistent_face_and_closed_shell_normals_mr))
    SUBTYPE OF(erroneous_data_measurement_requirement);
  END_ENTITY; 

  ENTITY inconsistent_edge_and_curve_directions
    SUBTYPE OF(erroneous_topology_and_geometry_relationship);
      SELF\data_quality_criterion_with_specification.assessment_method     : 
        shape_data_quality_assessment_by_logical_test;
     SELF\data_quality_criterion_with_specification.measurement_requirement:
        inconsistent_edge_and_curve_directions_mr;
  END_ENTITY;

  ENTITY inconsistent_edge_and_curve_directions_mr
    SUBTYPE OF(erroneous_topology_and_geometry_relationship_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.EDGE_CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY; 

  ENTITY inconsistent_face_and_surface_normals
    SUBTYPE OF(erroneous_topology_and_geometry_relationship);
      SELF\data_quality_criterion_with_specification.assessment_method     : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement: inconsistent_face_and_surface_normals_mr;
  END_ENTITY;

  ENTITY inconsistent_face_and_surface_normals_mr
    SUBTYPE OF(erroneous_topology_and_geometry_relationship_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.FACE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY; 

  ENTITY inconsistent_face_and_closed_shell_normals
    SUBTYPE OF(erroneous_topology_and_geometry_relationship);
      SELF\data_quality_criterion_with_specification.assessment_method     : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : 
        inconsistent_face_and_closed_shell_normals_mr;
  END_ENTITY;

  ENTITY inconsistent_face_and_closed_shell_normals_mr
    SUBTYPE OF(erroneous_topology_and_geometry_relationship_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.CLOSED_SHELL']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY erroneous_manifold_solid_brep
    ABSTRACT
    SUPERTYPE OF (ONEOF(wrongly_oriented_void, wrongly_placed_void))
    SUBTYPE OF(erroneous_data);
  END_ENTITY;

  ENTITY erroneous_manifold_solid_brep_mr
    ABSTRACT
    SUPERTYPE OF (ONEOF(wrongly_oriented_void_mr, wrongly_placed_void_mr))
    SUBTYPE OF(erroneous_data_measurement_requirement);
  END_ENTITY;

  ENTITY wrongly_oriented_void
    SUBTYPE OF(erroneous_manifold_solid_brep);
      SELF\data_quality_criterion_with_specification.assessment_method     : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : wrongly_oriented_void_mr;
  END_ENTITY;

  ENTITY wrongly_oriented_void_mr
    SUBTYPE OF(erroneous_manifold_solid_brep_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRIC_MODEL_SCHEMA.BREP_WITH_VOIDS']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['TOPOLOGY_SCHEMA.ORIENTED_CLOSED_SHELL']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY wrongly_placed_void
    SUBTYPE OF(erroneous_manifold_solid_brep);
      SELF\data_quality_criterion_with_specification.assessment_method     : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : wrongly_placed_void_mr;
  END_ENTITY;

  ENTITY wrongly_placed_void_mr
    SUBTYPE OF(erroneous_manifold_solid_brep_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRIC_MODEL_SCHEMA.BREP_WITH_VOIDS']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['TOPOLOGY_SCHEMA.ORIENTED_CLOSED_SHELL']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY inapt_data
    ABSTRACT SUPERTYPE OF (ONEOF(
      inapt_topology,
      inapt_geometry, 
      inapt_topology_and_geometry_relationship,
      inapt_geometric_model))
    SUBTYPE OF(shape_data_quality_criterion);
  END_ENTITY;

  ENTITY inapt_data_measurement_requirement
    ABSTRACT SUPERTYPE OF (ONEOF(
      inapt_topology_mr, 
      inapt_geometry_mr, 
      inapt_topology_and_geometry_relationship_mr, 
      inapt_geometric_model_mr))
    SUBTYPE OF(shape_data_quality_measurement_requirement);
  END_ENTITY;

  ENTITY inapt_topology
    ABSTRACT SUPERTYPE OF (ONEOF(
      free_edge, non_manifold_at_edge, 
      non_manifold_at_vertex, disconnected_shell))
    SUBTYPE OF(inapt_data);
  END_ENTITY;

  ENTITY inapt_topology_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      free_edge_mr, non_manifold_at_edge_mr, 
      non_manifold_at_vertex_mr, disconnected_shell_mr))
    SUBTYPE OF(inapt_data_measurement_requirement);
  END_ENTITY;

  ENTITY free_edge
    SUBTYPE OF(inapt_topology);
      SELF\data_quality_criterion_with_specification.assessment_method    : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : free_edge_mr;
  END_ENTITY;

  ENTITY free_edge_mr
    SUBTYPE OF(inapt_topology_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.INTEGER_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.CONNECTED_FACE_SET']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['TOPOLOGY_SCHEMA.EDGE_CURVE']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY non_manifold_at_edge
    SUBTYPE OF(inapt_topology);
      SELF\data_quality_criterion_with_specification.assessment_method    : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : non_manifold_at_edge_mr;
  END_ENTITY;

  ENTITY non_manifold_at_edge_mr
    SUBTYPE OF(inapt_topology_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.INTEGER_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'MANIFOLD_OBJECT_SELECT']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['TOPOLOGY_SCHEMA.EDGE_CURVE']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY non_manifold_at_vertex
    SUBTYPE OF(inapt_topology);
      SELF\data_quality_criterion_with_specification.assessment_method    : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : non_manifold_at_vertex_mr;
  END_ENTITY;

  ENTITY non_manifold_at_vertex_mr
    SUBTYPE OF(inapt_topology_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'MANIFOLD_OBJECT_SELECT']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['TOPOLOGY_SCHEMA.VERTEX_POINT']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY disconnected_shell
    SUBTYPE OF(inapt_topology);
      SELF\data_quality_criterion_with_specification.assessment_method    : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : disconnected_shell_mr;
  END_ENTITY;

  ENTITY disconnected_shell_mr
    SUBTYPE OF(inapt_topology_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.CONNECTED_FACE_SET']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY inapt_geometry
    ABSTRACT SUPERTYPE OF (ONEOF(
      nearly_degenerate_geometry, discontinuous_geometry, 
      self_intersecting_geometry, geometry_with_local_near_degeneracy, 
      complicated_linear_geometry, overlapping_geometry, 
      multiply_defined_geometry, geometry_with_local_irregularity))
    SUBTYPE OF(inapt_data);
  END_ENTITY;

  ENTITY inapt_geometry_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      nearly_degenerate_geometry_mr, discontinuous_geometry_mr, 
      self_intersecting_geometry_mr, geometry_with_local_near_degeneracy_mr, 
      complicated_linear_geometry_mr, overlapping_geometry_mr, 
      multiply_defined_geometry_mr, geometry_with_local_irregularity_mr))
    SUBTYPE OF(inapt_data_measurement_requirement);
  END_ENTITY;

  ENTITY nearly_degenerate_geometry
    ABSTRACT SUPERTYPE OF (ONEOF(
      small_area_surface, short_length_curve, entirely_narrow_width_surface))
    SUBTYPE OF(inapt_geometry);
  END_ENTITY;

  ENTITY nearly_degenerate_geometry_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      short_length_curve_mr, small_area_surface_mr, 
      entirely_narrow_width_surface_mr))
    SUBTYPE OF(inapt_geometry_mr);
  END_ENTITY;

  ENTITY short_length_curve
    SUBTYPE OF(nearly_degenerate_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method   : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : short_length_curve_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
              SELF\data_quality_criterion_with_specification.
              assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
              'REAL_INTERVAL_TO_MAX' 
            IN TYPEOF(
              SELF\data_quality_criterion_with_specification.
              assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY short_length_curve_mr
    SUBTYPE OF(nearly_degenerate_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
             OR
            ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
              'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
              IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY small_area_surface
    SUBTYPE OF(nearly_degenerate_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : small_area_surface_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'AREA_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'REAL_INTERVAL_TO_MAX' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY small_area_surface_mr
    SUBTYPE OF(nearly_degenerate_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.AREA_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
             OR
            ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
              'AREA_MEASURE_VALUE_RANGE_WITH_UNIT'
              IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY entirely_narrow_width_surface
    SUBTYPE OF(nearly_degenerate_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : entirely_narrow_width_surface_mr;
  END_ENTITY;

  ENTITY entirely_narrow_width_surface_mr
    SUBTYPE OF(nearly_degenerate_geometry_mr);
      width_tolerance : length_measure_value_range_with_unit;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.BOUNDED_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
             OR
            ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
              'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
              IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY discontinuous_geometry
    ABSTRACT SUPERTYPE OF (ONEOF(
      g1_discontinuous_curve, g2_discontinuous_curve, 
      g1_discontinuous_surface, g2_discontinuous_surface))
    SUBTYPE OF(inapt_geometry);
  END_ENTITY;

  ENTITY discontinuous_geometry_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      g1_discontinuous_curve_mr, g2_discontinuous_curve_mr, 
      g1_discontinuous_surface_mr, g2_discontinuous_surface_mr))
    SUBTYPE OF(inapt_geometry_mr);
  END_ENTITY;

  ENTITY g1_discontinuous_curve
    SUBTYPE OF(discontinuous_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : g1_discontinuous_curve_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'PLANE_ANGLE_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
            SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY g1_discontinuous_curve_mr
    SUBTYPE OF(discontinuous_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.PLANE_ANGLE_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'B_SPLINE_CURVE_KNOT_LOCATOR']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY g2_discontinuous_curve
    SUBTYPE OF(discontinuous_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method     : 
        shape_data_quality_assessment_by_pair_of_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : g2_discontinuous_curve_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'PLANE_ANGLE_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold_1)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'real_interval_from_min' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold_1.range_component));
      WR2 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'CURVATURE_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold_2)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold_2.range_component));
  END_ENTITY;

  ENTITY g2_discontinuous_curve_mr
    SUBTYPE OF(discontinuous_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
             'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'PLANE_ANGLE_AND_CURVATURE_PAIR');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'B_SPLINE_CURVE_KNOT_LOCATOR']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY g1_discontinuous_surface
    SUBTYPE OF(discontinuous_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method    : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : g1_discontinuous_surface_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'PLANE_ANGLE_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY g1_discontinuous_surface_mr
    SUBTYPE OF(discontinuous_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.PLANE_ANGLE_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'B_SPLINE_SURFACE_KNOT_LOCATOR']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
             OR
            ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
              'CURVATURE_MEASURE_VALUE_RANGE_WITH_UNIT'
              IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY g2_discontinuous_surface
    SUBTYPE OF(discontinuous_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method    : 
        shape_data_quality_assessment_by_pair_of_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : g2_discontinuous_surface_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'PLANE_ANGLE_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold_1)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold_1.range_component));
      WR2 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'CURVATURE_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold_2)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold_2.range_component));
  END_ENTITY;

  ENTITY g2_discontinuous_surface_mr
    SUBTYPE OF(discontinuous_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
             'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'PLANE_ANGLE_AND_CURVATURE_PAIR');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'B_SPLINE_SURFACE_KNOT_LOCATOR']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY self_intersecting_geometry
    ABSTRACT SUPERTYPE OF (ONEOF(
      self_intersecting_curve, self_intersecting_surface))
    SUBTYPE OF(inapt_geometry);
  END_ENTITY;

  ENTITY self_intersecting_geometry_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      self_intersecting_curve_mr, self_intersecting_surface_mr))
    SUBTYPE OF(inapt_geometry_mr);
  END_ENTITY;

  ENTITY self_intersecting_curve
    SUBTYPE OF(self_intersecting_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : self_intersecting_curve_mr;
  END_ENTITY;

  ENTITY self_intersecting_curve_mr
    SUBTYPE OF(self_intersecting_geometry_mr);
      arc_length_separation_factor : REAL;
      interference_tolerance       : length_measure_value_range_with_unit;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['GEOMETRY_SCHEMA.POINT_ON_CURVE',
            'GEOMETRY_SCHEMA.POINT_ON_CURVE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
             OR
            ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
              'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
              IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY self_intersecting_surface
    SUBTYPE OF(self_intersecting_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : self_intersecting_surface_mr;
  END_ENTITY;

  ENTITY self_intersecting_surface_mr
    SUBTYPE OF(self_intersecting_geometry_mr);
      geodesic_separation_factor : REAL;
      interference_tolerance     : length_measure_value_range_with_unit;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['GEOMETRY_SCHEMA.POINT_ON_SURFACE',
             'GEOMETRY_SCHEMA.POINT_ON_SURFACE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
             OR
            ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
              'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
              IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY geometry_with_local_near_degeneracy
    ABSTRACT SUPERTYPE OF (ONEOF(
      curve_with_small_curvature_radius, short_length_curve_segment, 
      surface_with_small_curvature_radius, small_area_surface_patch, 
      narrow_width_surface_patch, indistinct_surface_knots, 
      indistinct_curve_knots, nearly_degenerate_surface_boundary, 
      nearly_degenerate_surface_patch))
    SUBTYPE OF(inapt_geometry);
  END_ENTITY;

  ENTITY geometry_with_local_near_degeneracy_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      curve_with_small_curvature_radius_mr, short_length_curve_segment_mr, 
      surface_with_small_curvature_radius_mr, small_area_surface_patch_mr, 
      narrow_width_surface_patch_mr, indistinct_curve_knots_mr, 
      indistinct_surface_knots_mr, nearly_degenerate_surface_boundary_mr, 
      nearly_degenerate_surface_patch_mr))
    SUBTYPE OF(inapt_geometry_mr);
  END_ENTITY;

  ENTITY curve_with_small_curvature_radius
    SUBTYPE OF(geometry_with_local_near_degeneracy);
      SELF\data_quality_criterion_with_specification.assessment_method     : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : curve_with_small_curvature_radius_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'REAL_INTERVAL_TO_MAX' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY curve_with_small_curvature_radius_mr
    SUBTYPE OF(geometry_with_local_near_degeneracy_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['GEOMETRY_SCHEMA.POINT_ON_CURVE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
             OR
            ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
              'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
              IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY short_length_curve_segment
    SUBTYPE OF(geometry_with_local_near_degeneracy);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : short_length_curve_segment_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'REAL_INTERVAL_TO_MAX' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY short_length_curve_segment_mr
    SUBTYPE OF(geometry_with_local_near_degeneracy_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'B_SPLINE_CURVE_SEGMENT']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
             OR
            ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
              'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
              IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY surface_with_small_curvature_radius
    SUBTYPE OF(geometry_with_local_near_degeneracy);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : surface_with_small_curvature_radius_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'REAL_INTERVAL_TO_MAX' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY surface_with_small_curvature_radius_mr
    SUBTYPE OF(geometry_with_local_near_degeneracy_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['GEOMETRY_SCHEMA.POINT_ON_SURFACE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
             OR
            ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
              'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
              IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY small_area_surface_patch
    SUBTYPE OF(geometry_with_local_near_degeneracy);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : small_area_surface_patch_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'AREA_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'REAL_INTERVAL_TO_MAX' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY small_area_surface_patch_mr
    SUBTYPE OF(geometry_with_local_near_degeneracy_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.AREA_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'B_SPLINE_SURFACE_PATCH']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
             OR
            ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
              'AREA_MEASURE_VALUE_RANGE_WITH_UNIT'
              IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY narrow_width_surface_patch
    SUBTYPE OF(geometry_with_local_near_degeneracy);
      SELF\data_quality_criterion_with_specification.assessment_method     : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : narrow_width_surface_patch_mr;
  END_ENTITY;

  ENTITY narrow_width_surface_patch_mr
    SUBTYPE OF(geometry_with_local_near_degeneracy_mr);
      width_tolerance : length_measure_value_range_with_unit;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'B_SPLINE_SURFACE_PATCH']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
             OR
            ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
              'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
              IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY indistinct_curve_knots
    SUBTYPE OF(geometry_with_local_near_degeneracy);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : indistinct_curve_knots_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'PARAMETER_SPACE_VALUE_RANGE'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'REAL_INTERVAL_TO_MAX'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY indistinct_curve_knots_mr
    SUBTYPE OF(geometry_with_local_near_degeneracy_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.PARAMETER_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_CURVE_WITH_KNOTS']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'B_SPLINE_CURVE_KNOT_LOCATOR']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY indistinct_surface_knots
    SUBTYPE OF(geometry_with_local_near_degeneracy);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : indistinct_surface_knots_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'PARAMETER_SPACE_VALUE_RANGE'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'REAL_INTERVAL_TO_MAX'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY indistinct_surface_knots_mr
    SUBTYPE OF(geometry_with_local_near_degeneracy_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.PARAMETER_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_SURFACE_WITH_KNOTS']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'B_SPLINE_SURFACE_KNOT_LOCATOR']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY nearly_degenerate_surface_boundary
    SUBTYPE OF(geometry_with_local_near_degeneracy);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : nearly_degenerate_surface_boundary_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'FINITE_REAL_INTERVAL' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY nearly_degenerate_surface_boundary_mr
    SUBTYPE OF(geometry_with_local_near_degeneracy_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'B_SPLINE_OR_RECTANGULAR_COMPOSITE_SURFACE_SELECT']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'BOUNDARY_CURVE_OF_B_SPLINE_OR_RECTANGULAR_COMPOSITE_SURFACE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
             OR
            ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
              'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
              IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY nearly_degenerate_surface_patch
    SUBTYPE OF(geometry_with_local_near_degeneracy);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : nearly_degenerate_surface_patch_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'REAL_INTERVAL_TO_MAX' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY nearly_degenerate_surface_patch_mr
    SUBTYPE OF(geometry_with_local_near_degeneracy_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'B_SPLINE_SURFACE_PATCH']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY complicated_linear_geometry
    ABSTRACT SUPERTYPE OF (ONEOF(
      high_degree_linear_curve, high_degree_planar_surface))
    SUBTYPE OF(inapt_geometry);
  END_ENTITY;

  ENTITY complicated_linear_geometry_mr
    ABSTRACT
    SUPERTYPE OF (ONEOF(
        high_degree_linear_curve_mr, 
        high_degree_planar_surface_mr))
    SUBTYPE OF(inapt_geometry_mr);
  END_ENTITY;

  ENTITY high_degree_linear_curve
    SUBTYPE OF(complicated_linear_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : high_degree_linear_curve_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'INTEGER_VALUE_RANGE'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'INTEGER_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY high_degree_linear_curve_mr
    SUBTYPE OF(complicated_linear_geometry_mr);
      linear_tolerance : length_measure_value_range_with_unit;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.INTEGER_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY high_degree_planar_surface
    SUBTYPE OF(complicated_linear_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : high_degree_planar_surface_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'INTEGER_VALUE_RANGE'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'INTEGER_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY high_degree_planar_surface_mr
    SUBTYPE OF(complicated_linear_geometry_mr);
      planar_tolerance : length_measure_value_range_with_unit;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.INTEGER_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY overlapping_geometry
    ABSTRACT SUPERTYPE OF (ONEOF(
      partly_overlapping_curves, partly_overlapping_surfaces))
    SUBTYPE OF(inapt_geometry);
  END_ENTITY;

  ENTITY overlapping_geometry_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      partly_overlapping_curves_mr, partly_overlapping_surfaces_mr))
    SUBTYPE OF(inapt_geometry_mr);
  END_ENTITY;

  ENTITY partly_overlapping_curves
    SUBTYPE OF(overlapping_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : partly_overlapping_curves_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' + 
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY partly_overlapping_curves_mr
    SUBTYPE OF(overlapping_geometry_mr);
      interference_tolerance : length_measure_value_range_with_unit;
      nearby_factor          : REAL;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.CURVE','GEOMETRY_SCHEMA.CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY partly_overlapping_surfaces
    SUBTYPE OF(overlapping_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : partly_overlapping_surfaces_mr;
  END_ENTITY;

  ENTITY partly_overlapping_surfaces_mr
    SUBTYPE OF(overlapping_geometry_mr);
      interference_tolerance : length_measure_value_range_with_unit;
      nearby_factor          : REAL;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.SURFACE','GEOMETRY_SCHEMA.SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY multiply_defined_geometry
    ABSTRACT SUPERTYPE OF (ONEOF(
      multiply_defined_curves, multiply_defined_surfaces, 
      multiply_defined_points))
    SUBTYPE OF(inapt_geometry);
  END_ENTITY;

  ENTITY multiply_defined_geometry_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      multiply_defined_curves_mr, multiply_defined_surfaces_mr, 
      multiply_defined_points_mr))
    SUBTYPE OF(inapt_geometry_mr);
  END_ENTITY;

  ENTITY multiply_defined_curves
    SUBTYPE OF(multiply_defined_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : multiply_defined_curves_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' + 
            'REAL_INTERVAL_TO_MAX' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY multiply_defined_curves_mr
    SUBTYPE OF(multiply_defined_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.CURVE','GEOMETRY_SCHEMA.CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY multiply_defined_surfaces
    SUBTYPE OF(multiply_defined_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : multiply_defined_surfaces_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' + 
            'REAL_INTERVAL_TO_MAX' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY multiply_defined_surfaces_mr
    SUBTYPE OF(multiply_defined_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.SURFACE','GEOMETRY_SCHEMA.SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY multiply_defined_points
    SUBTYPE OF(multiply_defined_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : multiply_defined_points_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'REAL_INTERVAL_TO_MAX' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY multiply_defined_points_mr
    SUBTYPE OF(multiply_defined_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.POINT','GEOMETRY_SCHEMA.POINT']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY geometry_with_local_irregularity
    ABSTRACT
    SUPERTYPE OF (ONEOF(
     extreme_patch_width_variation,
     zero_surface_normal, 
     abrupt_change_of_surface_normal, 
     wavy_planar_curve, 
     wavy_surface))
    SUBTYPE OF(inapt_geometry);
  END_ENTITY;

  ENTITY geometry_with_local_irregularity_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      extreme_patch_width_variation_mr, zero_surface_normal_mr, 
      abrupt_change_of_surface_normal_mr, 
      wavy_planar_curve_mr, wavy_surface_mr))
    SUBTYPE OF(inapt_geometry_mr);
  END_ENTITY;

  ENTITY extreme_patch_width_variation
    SUBTYPE OF(geometry_with_local_irregularity);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : extreme_patch_width_variation_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'RATIO_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY extreme_patch_width_variation_mr
    SUBTYPE OF(geometry_with_local_irregularity_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.RATIO_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'B_SPLINE_SURFACE_KNOT_LOCATOR']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'PARAMETER_SPACE_VALUE_RANGE'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY zero_surface_normal
    SUBTYPE OF(geometry_with_local_irregularity);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : zero_surface_normal_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'PLANE_ANGLE_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_TO_MAX' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY zero_surface_normal_mr
    SUBTYPE OF(geometry_with_local_irregularity_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.PLANE_ANGLE_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['GEOMETRY_SCHEMA.POINT_ON_SURFACE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                      'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                      IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
               'PLANE_ANGLE_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY abrupt_change_of_surface_normal
    SUBTYPE OF(geometry_with_local_irregularity);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : abrupt_change_of_surface_normal_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'PLANE_ANGLE_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY abrupt_change_of_surface_normal_mr
    SUBTYPE OF(geometry_with_local_irregularity_mr);
      nearby_factor          : REAL;
      small_vector_tolerance : length_measure_value_range_with_unit;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.PLANE_ANGLE_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['GEOMETRY_SCHEMA.POINT_ON_SURFACE',
             'GEOMETRY_SCHEMA.POINT_ON_SURFACE']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY wavy_planar_curve
    SUBTYPE OF(geometry_with_local_irregularity);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : wavy_planar_curve_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'INTEGER_VALUE_RANGE'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA. ' +
            'INTEGER_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY wavy_planar_curve_mr
    SUBTYPE OF(geometry_with_local_irregularity_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.INTEGER_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['GEOMETRY_SCHEMA.POINT_ON_CURVE']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY wavy_surface
    SUBTYPE OF(geometry_with_local_irregularity);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : wavy_surface_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'INTEGER_VALUE_RANGE'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'INTEGER_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY wavy_surface_mr
    SUBTYPE OF(geometry_with_local_irregularity_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.INTEGER_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['GEOMETRY_SCHEMA.POINT_ON_SURFACE']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY inapt_topology_and_geometry_relationship
    ABSTRACT SUPERTYPE OF (ONEOF(
      topology_related_to_nearly_degenerate_geometry, 
      geometric_gap_in_topology, 
      non_smooth_geometry_transition_across_edge, 
      topology_related_to_self_intersecting_geometry, 
      steep_geometry_transition_across_edge, 
      topology_related_to_overlapping_geometry, 
      topology_related_to_multiply_defined_geometry))
    SUBTYPE OF(inapt_data);
  END_ENTITY;

  ENTITY inapt_topology_and_geometry_relationship_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      topology_related_to_nearly_degenerate_geometry_mr, 
      geometric_gap_in_topology_mr, 
      non_smooth_geometry_transition_across_edge_mr, 
      topology_related_to_self_intersecting_geometry_mr, 
      steep_geometry_transition_across_edge_mr, 
      topology_related_to_overlapping_geometry_mr, 
      topology_related_to_multiply_defined_geometry_mr))
    SUBTYPE OF(inapt_data_measurement_requirement);
  END_ENTITY;

  ENTITY topology_related_to_nearly_degenerate_geometry
    ABSTRACT SUPERTYPE OF (ONEOF(
      short_length_edge, small_area_face, entirely_narrow_width_face))
    SUBTYPE OF(inapt_topology_and_geometry_relationship);
  END_ENTITY;

  ENTITY topology_related_to_nearly_degenerate_geometry_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      short_length_edge_mr, small_area_face_mr, 
      entirely_narrow_width_face_mr))
    SUBTYPE OF(inapt_topology_and_geometry_relationship_mr);
  END_ENTITY;

  ENTITY short_length_edge
    SUBTYPE OF(topology_related_to_nearly_degenerate_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method     : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : short_length_edge_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_TO_MAX' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY short_length_edge_mr
    SUBTYPE OF(topology_related_to_nearly_degenerate_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.EDGE_CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY small_area_face
    SUBTYPE OF(topology_related_to_nearly_degenerate_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method     : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : small_area_face_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'AREA_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_TO_MAX' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY small_area_face_mr
    SUBTYPE OF(topology_related_to_nearly_degenerate_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.AREA_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.FACE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'AREA_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY entirely_narrow_width_face
    SUBTYPE OF(topology_related_to_nearly_degenerate_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : entirely_narrow_width_face_mr;
  END_ENTITY;

  ENTITY entirely_narrow_width_face_mr
    SUBTYPE OF(topology_related_to_nearly_degenerate_geometry_mr);
      width_tolerance : length_measure_value_range_with_unit;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.FACE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY geometric_gap_in_topology
    ABSTRACT SUPERTYPE OF (ONEOF(
      gap_between_adjacent_edges_in_loop, 
      gap_between_vertex_and_base_surface, 
      gap_between_vertex_and_edge, 
      gap_between_edge_and_base_surface, 
      gap_between_pcurves_related_to_an_edge,
      gap_between_faces_related_to_an_edge))
    SUBTYPE OF(inapt_topology_and_geometry_relationship);
  END_ENTITY;

  ENTITY geometric_gap_in_topology_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      gap_between_adjacent_edges_in_loop_mr, 
      gap_between_vertex_and_base_surface_mr, 
      gap_between_vertex_and_edge_mr, 
      gap_between_edge_and_base_surface_mr, 
      gap_between_pcurves_related_to_an_edge_mr, 
      gap_between_faces_related_to_an_edge_mr))
    SUBTYPE OF(inapt_topology_and_geometry_relationship_mr);
  END_ENTITY;

  ENTITY gap_between_adjacent_edges_in_loop
    SUBTYPE OF(geometric_gap_in_topology);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
      shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : gap_between_adjacent_edges_in_loop_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY gap_between_adjacent_edges_in_loop_mr
    SUBTYPE OF(geometric_gap_in_topology_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.EDGE_LOOP']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['TOPOLOGY_SCHEMA.ORIENTED_EDGE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY gap_between_vertex_and_base_surface
    SUBTYPE OF(geometric_gap_in_topology);
      SELF\data_quality_criterion_with_specification.assessment_method     : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : gap_between_vertex_and_base_surface_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY gap_between_vertex_and_base_surface_mr
    SUBTYPE OF(geometric_gap_in_topology_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.FACE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['TOPOLOGY_SCHEMA.VERTEX_POINT',
             'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'POINT_ON_FACE_SURFACE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY gap_between_vertex_and_edge
    SUBTYPE OF(geometric_gap_in_topology);
      SELF\data_quality_criterion_with_specification.assessment_method     : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : gap_between_vertex_and_edge_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY gap_between_vertex_and_edge_mr
    SUBTYPE OF(geometric_gap_in_topology_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.EDGE_CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['TOPOLOGY_SCHEMA.VERTEX_POINT',
             'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'POINT_ON_EDGE_CURVE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY gap_between_edge_and_base_surface
    SUBTYPE OF(geometric_gap_in_topology);
      SELF\data_quality_criterion_with_specification.assessment_method     : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : gap_between_edge_and_base_surface_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY gap_between_edge_and_base_surface_mr
    SUBTYPE OF(geometric_gap_in_topology_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.FACE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'POINT_ON_EDGE_CURVE',
             'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'POINT_ON_FACE_SURFACE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY gap_between_pcurves_related_to_an_edge
    SUBTYPE OF(geometric_gap_in_topology);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : gap_between_pcurves_related_to_an_edge_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY gap_between_pcurves_related_to_an_edge_mr
    SUBTYPE OF(geometric_gap_in_topology_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.EDGE_CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['GEOMETRY_SCHEMA.POINT_ON_SURFACE',
             'GEOMETRY_SCHEMA.POINT_ON_SURFACE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY; 

  ENTITY gap_between_faces_related_to_an_edge
    SUBTYPE OF(geometric_gap_in_topology);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : gap_between_faces_related_to_an_edge_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY gap_between_faces_related_to_an_edge_mr
    SUBTYPE OF(geometric_gap_in_topology_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.CONNECTED_FACE_SET']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'POINT_ON_EDGE_CURVE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY non_smooth_geometry_transition_across_edge
    ABSTRACT SUPERTYPE OF (ONEOF(
      g1_discontinuity_between_adjacent_faces, 
      g2_discontinuity_between_adjacent_faces))
    SUBTYPE OF(inapt_topology_and_geometry_relationship);
  END_ENTITY;

  ENTITY non_smooth_geometry_transition_across_edge_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      g1_discontinuity_between_adjacent_faces_mr, 
      g2_discontinuity_between_adjacent_faces_mr))
    SUBTYPE OF(inapt_topology_and_geometry_relationship_mr);
  END_ENTITY;

  ENTITY g1_discontinuity_between_adjacent_faces
    SUBTYPE OF(non_smooth_geometry_transition_across_edge);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : g1_discontinuity_between_adjacent_faces_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'PLANE_ANGLE_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY g1_discontinuity_between_adjacent_faces_mr
    SUBTYPE OF(non_smooth_geometry_transition_across_edge_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.PLANE_ANGLE_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.CONNECTED_FACE_SET']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'POINT_ON_EDGE_CURVE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'PLANE_ANGLE_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY g2_discontinuity_between_adjacent_faces
    SUBTYPE OF(non_smooth_geometry_transition_across_edge);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_pair_of_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : g2_discontinuity_between_adjacent_faces_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'PLANE_ANGLE_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold_1)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold_1.range_component));
      WR2 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'CURVATURE_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold_2)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold_2.range_component));
  END_ENTITY;

  ENTITY g2_discontinuity_between_adjacent_faces_mr
    SUBTYPE OF(non_smooth_geometry_transition_across_edge_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
             'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'PLANE_ANGLE_AND_CURVATURE_PAIR');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.CONNECTED_FACE_SET']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'POINT_ON_EDGE_CURVE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'CURVATURE_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY topology_related_to_self_intersecting_geometry
    ABSTRACT SUPERTYPE OF (ONEOF(
      self_intersecting_loop, intersecting_loops, 
      self_intersecting_shell, intersecting_shells))
    SUBTYPE OF(inapt_topology_and_geometry_relationship);
  END_ENTITY;

  ENTITY topology_related_to_self_intersecting_geometry_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      self_intersecting_loop_mr, intersecting_loops_mr, 
      self_intersecting_shell_mr, intersecting_shells_mr))
    SUBTYPE OF(inapt_topology_and_geometry_relationship_mr);
  END_ENTITY;

  ENTITY self_intersecting_loop
    SUBTYPE OF(topology_related_to_self_intersecting_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
      measurement_requirement : self_intersecting_loop_mr;
  END_ENTITY;

  ENTITY self_intersecting_loop_mr
    SUBTYPE OF(topology_related_to_self_intersecting_geometry_mr);
      arc_length_separation_factor : REAL;
      interference_tolerance     : length_measure_value_range_with_unit;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.EDGE_LOOP']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'POINT_ON_EDGE_CURVE',
             'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'POINT_ON_EDGE_CURVE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY intersecting_loops
    SUBTYPE OF(topology_related_to_self_intersecting_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : intersecting_loops_mr;
  END_ENTITY;

  ENTITY intersecting_loops_mr
    SUBTYPE OF(topology_related_to_self_intersecting_geometry_mr);
      interference_tolerance : length_measure_value_range_with_unit;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.FACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'POINT_ON_EDGE_CURVE',
             'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'POINT_ON_EDGE_CURVE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY self_intersecting_shell
    SUBTYPE OF(topology_related_to_self_intersecting_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : self_intersecting_shell_mr;
  END_ENTITY;

  ENTITY self_intersecting_shell_mr
    SUBTYPE OF(topology_related_to_self_intersecting_geometry_mr);
      geodesic_separation_factor : REAL;
      interference_tolerance     : length_measure_value_range_with_unit;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.CONNECTED_FACE_SET']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'POINT_ON_FACE_SURFACE',
             'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'POINT_ON_FACE_SURFACE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY intersecting_shells
    SUBTYPE OF(topology_related_to_self_intersecting_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : intersecting_shells_mr;
  END_ENTITY;

  ENTITY intersecting_shells_mr
    SUBTYPE OF(topology_related_to_self_intersecting_geometry_mr);
      interference_tolerance : length_measure_value_range_with_unit;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.CONNECTED_FACE_SET',
             'TOPOLOGY_SCHEMA.CONNECTED_FACE_SET']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'POINT_ON_FACE_SURFACE',
             'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'POINT_ON_FACE_SURFACE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY steep_geometry_transition_across_edge
    ABSTRACT SUPERTYPE OF (ONEOF(
      steep_angle_between_adjacent_edges, 
      steep_angle_between_adjacent_faces))
    SUBTYPE OF(inapt_topology_and_geometry_relationship);
  END_ENTITY;

  ENTITY steep_geometry_transition_across_edge_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      steep_angle_between_adjacent_edges_mr, 
      steep_angle_between_adjacent_faces_mr))
    SUBTYPE OF(inapt_topology_and_geometry_relationship_mr);
  END_ENTITY;

  ENTITY steep_angle_between_adjacent_edges
    SUBTYPE OF(steep_geometry_transition_across_edge);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : steep_angle_between_adjacent_edges_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'PLANE_ANGLE_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY steep_angle_between_adjacent_edges_mr
    SUBTYPE OF(steep_geometry_transition_across_edge_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.PLANE_ANGLE_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.EDGE_LOOP']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['TOPOLOGY_SCHEMA.ORIENTED_EDGE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'PLANE_ANGLE_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY steep_angle_between_adjacent_faces
    SUBTYPE OF(steep_geometry_transition_across_edge);
      SELF\data_quality_criterion_with_specification.assessment_method     : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : steep_angle_between_adjacent_faces_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'PLANE_ANGLE_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_FROM_MIN'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold));
  END_ENTITY;

  ENTITY steep_angle_between_adjacent_faces_mr
    SUBTYPE OF(steep_geometry_transition_across_edge_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.PLANE_ANGLE_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.CONNECTED_FACE_SET']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'POINT_ON_EDGE_CURVE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'PLANE_ANGLE_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY topology_related_to_overlapping_geometry
    ABSTRACT
    SUPERTYPE OF (ONEOF(
      partly_overlapping_faces, partly_overlapping_edges))
    SUBTYPE OF(inapt_topology_and_geometry_relationship);
  END_ENTITY;

  ENTITY topology_related_to_overlapping_geometry_mr
    ABSTRACT
    SUPERTYPE OF (ONEOF(
      partly_overlapping_faces_mr, partly_overlapping_edges_mr))
    SUBTYPE OF(inapt_topology_and_geometry_relationship_mr);
  END_ENTITY;

  ENTITY partly_overlapping_faces
    SUBTYPE OF(topology_related_to_overlapping_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : partly_overlapping_faces_mr;
  END_ENTITY;

  ENTITY partly_overlapping_faces_mr
    SUBTYPE OF(topology_related_to_overlapping_geometry_mr);
      interference_tolerance : length_measure_value_range_with_unit;
      nearby_factor          : REAL;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.FACE_SURFACE',
             'TOPOLOGY_SCHEMA.FACE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY partly_overlapping_edges
    SUBTYPE OF(topology_related_to_overlapping_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : partly_overlapping_edges_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LEMGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY partly_overlapping_edges_mr
    SUBTYPE OF(topology_related_to_overlapping_geometry_mr);
      interference_tolerance : length_measure_value_range_with_unit;
      nearby_factor          : REAL;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.EDGE_CURVE',
             'TOPOLOGY_SCHEMA.EDGE_CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                      'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                      IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY topology_related_to_multiply_defined_geometry
    ABSTRACT SUPERTYPE OF (ONEOF(
      multiply_defined_faces, 
      multiply_defined_vertices, 
      multiply_defined_edges))
    SUBTYPE OF(inapt_topology_and_geometry_relationship);
  END_ENTITY;

  ENTITY topology_related_to_multiply_defined_geometry_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      multiply_defined_faces_mr, 
      multiply_defined_vertices_mr, 
      multiply_defined_edges_mr))
    SUBTYPE OF(inapt_topology_and_geometry_relationship_mr);
  END_ENTITY;

  ENTITY multiply_defined_faces
    SUBTYPE OF(topology_related_to_multiply_defined_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : multiply_defined_faces_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_FROM_MAX' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY multiply_defined_faces_mr
    SUBTYPE OF(topology_related_to_multiply_defined_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.FACE_SURFACE',
             'TOPOLOGY_SCHEMA.FACE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY multiply_defined_edges
    SUBTYPE OF(topology_related_to_multiply_defined_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : multiply_defined_edges_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_FROM_MAX' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY multiply_defined_edges_mr
    SUBTYPE OF(topology_related_to_multiply_defined_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.EDGE_CURVE',
             'TOPOLOGY_SCHEMA.EDGE_CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY multiply_defined_vertices
    SUBTYPE OF(topology_related_to_multiply_defined_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : multiply_defined_vertices_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_FROM_MAX' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY multiply_defined_vertices_mr
    SUBTYPE OF(topology_related_to_multiply_defined_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.VERTEX_POINT',
             'TOPOLOGY_SCHEMA.VERTEX_POINT']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY inapt_geometric_model
    ABSTRACT SUPERTYPE OF (ONEOF(
      partly_overlapping_solids, small_volume_solid, 
      multiply_defined_solids, entirely_narrow_width_solid, 
      intersecting_shells_in_solid))
    SUBTYPE OF(inapt_data);
  END_ENTITY;

  ENTITY inapt_geometric_model_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      small_volume_solid_mr, entirely_narrow_width_solid_mr, 
      partly_overlapping_solids_mr, multiply_defined_solids_mr, 
      intersecting_shells_in_solid_mr))
    SUBTYPE OF(inapt_data_measurement_requirement);
  END_ENTITY;

  ENTITY small_volume_solid
    SUBTYPE OF(inapt_geometric_model);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : small_volume_solid_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'VOLUME_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_TO_MAX' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY small_volume_solid_mr
    SUBTYPE OF(inapt_geometric_model_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.VOLUME_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRIC_MODEL_SCHEMA.MANIFOLD_SOLID_BREP']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'VOLUME_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY entirely_narrow_width_solid
    SUBTYPE OF(inapt_geometric_model);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : entirely_narrow_width_solid_mr;
  END_ENTITY;

  ENTITY entirely_narrow_width_solid_mr
    SUBTYPE OF(inapt_geometric_model_mr);
      width_tolerance : length_measure_value_range_with_unit;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRIC_MODEL_SCHEMA.MANIFOLD_SOLID_BREP']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY partly_overlapping_solids
    SUBTYPE OF(inapt_geometric_model);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : partly_overlapping_solids_mr;
  END_ENTITY;

  ENTITY partly_overlapping_solids_mr
    SUBTYPE OF(inapt_geometric_model_mr);
      interference_tolerance : length_measure_value_range_with_unit;
      nearby_factor          : REAL;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRIC_MODEL_SCHEMA.MANIFOLD_SOLID_BREP',
             'GEOMETRIC_MODEL_SCHEMA.MANIFOLD_SOLID_BREP']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY multiply_defined_solids
    SUBTYPE OF(inapt_geometric_model);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : multiply_defined_solids_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'REAL_INTERVAL_TO_MAX' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY multiply_defined_solids_mr
    SUBTYPE OF(inapt_geometric_model_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRIC_MODEL_SCHEMA.MANIFOLD_SOLID_BREP',
             'GEOMETRIC_MODEL_SCHEMA.MANIFOLD_SOLID_BREP']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY intersecting_shells_in_solid
    SUBTYPE OF(inapt_geometric_model);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_logical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : intersecting_shells_in_solid_mr;
  END_ENTITY;

  ENTITY intersecting_shells_in_solid_mr
    SUBTYPE OF(inapt_geometric_model_mr);
      interference_tolerance : length_measure_value_range_with_unit;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRIC_MODEL_SCHEMA.BREP_WITH_VOIDS']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['TOPOLOGY_SCHEMA.FACE_SURFACE',
             'TOPOLOGY_SCHEMA.FACE_SURFACE']);
      WR4 : ( NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
                     'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                     IN TYPEOF( SELF ) ))
              OR
             ( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' + 
               'LENGTH_MEASURE_VALUE_RANGE_WITH_UNIT'
               IN TYPEOF( SELF.required_specific_accuracy.range ) );
  END_ENTITY;

  ENTITY overcomplex_data
    ABSTRACT SUPERTYPE OF (ONEOF(
      overcomplex_topology, 
      overcomplex_geometry, 
      overcomplex_topology_and_geometry_relationship, 
      overcomplex_manifold_solid_brep))
    SUBTYPE OF(shape_data_quality_criterion);
  END_ENTITY;

  ENTITY overcomplex_data_measurement_requirement
    ABSTRACT SUPERTYPE OF (ONEOF(
      overcomplex_topology_mr, 
      overcomplex_geometry_mr, 
      overcomplex_topology_and_geometry_relationship_mr, 
      overcomplex_manifold_solid_brep_mr))
    SUBTYPE OF(shape_data_quality_measurement_requirement);
  END_ENTITY;

  ENTITY overcomplex_topology
    ABSTRACT 
    SUPERTYPE OF (over_used_vertex)
    SUBTYPE OF(overcomplex_data);
  END_ENTITY;

  ENTITY overcomplex_topology_mr
    ABSTRACT SUPERTYPE OF (over_used_vertex_mr)
    SUBTYPE OF(overcomplex_data_measurement_requirement);
  END_ENTITY;

  ENTITY over_used_vertex
    SUBTYPE OF(overcomplex_topology);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : over_used_vertex_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'INTEGER_VALUE_RANGE'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'INTEGER_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY over_used_vertex_mr
    SUBTYPE OF(overcomplex_topology_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.INTEGER_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.VERTEX_POINT']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY overcomplex_geometry
    ABSTRACT
    SUPERTYPE OF (ONEOF(
      excessively_high_degree_curve, 
      curve_with_excessive_segments, 
      excessively_high_degree_surface, 
      surface_with_excessive_patches))
    SUBTYPE OF(overcomplex_data);
  END_ENTITY;

  ENTITY overcomplex_geometry_mr
    ABSTRACT
    SUPERTYPE OF (ONEOF(
      excessively_high_degree_curve_mr, 
      curve_with_excessive_segments_mr, 
      excessively_high_degree_surface_mr, 
      surface_with_excessive_patches_mr))
    SUBTYPE OF(overcomplex_data_measurement_requirement);
  END_ENTITY;

  ENTITY excessively_high_degree_curve
    SUBTYPE OF(overcomplex_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : excessively_high_degree_curve_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'INTEGER_VALUE_RANGE'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'INTEGER_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY excessively_high_degree_curve_mr
    SUBTYPE OF(overcomplex_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.INTEGER_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY curve_with_excessive_segments
    SUBTYPE OF(overcomplex_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : curve_with_excessive_segments_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'INTEGER_VALUE_RANGE'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'INTEGER_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY curve_with_excessive_segments_mr
    SUBTYPE OF(overcomplex_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.INTEGER_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY excessively_high_degree_surface
    SUBTYPE OF(overcomplex_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : excessively_high_degree_surface_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'INTEGER_VALUE_RANGE'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'INTEGER_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY excessively_high_degree_surface_mr
    SUBTYPE OF(overcomplex_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.INTEGER_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY surface_with_excessive_patches
    SUBTYPE OF(overcomplex_geometry);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : surface_with_excessive_patches_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'INTEGER_VALUE_RANGE'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'INTEGER_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY surface_with_excessive_patches_mr
    SUBTYPE OF(overcomplex_geometry_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.INTEGER_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRY_SCHEMA.B_SPLINE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY overcomplex_topology_and_geometry_relationship
    ABSTRACT SUPERTYPE OF (ONEOF(
      unused_patches, edge_with_excessive_segments, 
      face_surface_with_excessive_patches))
    SUBTYPE OF(overcomplex_data);
  END_ENTITY;

  ENTITY overcomplex_topology_and_geometry_relationship_mr
    ABSTRACT SUPERTYPE OF (ONEOF(
      edge_with_excessive_segments_mr, 
      face_surface_with_excessive_patches_mr, 
      unused_patches_mr))
    SUBTYPE OF(overcomplex_data_measurement_requirement);
  END_ENTITY;

  ENTITY edge_with_excessive_segments
    SUBTYPE OF(overcomplex_topology_and_geometry_relationship);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : edge_with_excessive_segments_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'INTEGER_VALUE_RANGE'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'INTEGER_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY edge_with_excessive_segments_mr
    SUBTYPE OF(overcomplex_topology_and_geometry_relationship_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.INTEGER_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.EDGE_CURVE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY face_surface_with_excessive_patches
    SUBTYPE OF(overcomplex_topology_and_geometry_relationship);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : face_surface_with_excessive_patches_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'INTEGER_VALUE_RANGE'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'INTEGER_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY face_surface_with_excessive_patches_mr
    SUBTYPE OF(overcomplex_topology_and_geometry_relationship_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.INTEGER_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.FACE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY unused_patches
    SUBTYPE OF(overcomplex_topology_and_geometry_relationship);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : unused_patches_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'INTEGER_VALUE_RANGE'
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'INTEGER_INTERVAL_FROM_MIN' 
            IN TYPEOF(
                SELF\data_quality_criterion_with_specification.
                assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY unused_patches_mr
    SUBTYPE OF(overcomplex_topology_and_geometry_relationship_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.INTEGER_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['TOPOLOGY_SCHEMA.FACE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            ['SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
             'B_SPLINE_SURFACE_STRIP']);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  ENTITY overcomplex_manifold_solid_brep
    ABSTRACT SUBTYPE OF(overcomplex_data);
  END_ENTITY;

  ENTITY overcomplex_manifold_solid_brep_mr
    ABSTRACT SUBTYPE OF(overcomplex_data_measurement_requirement);
  END_ENTITY;

  ENTITY solid_with_void
    SUBTYPE OF(overcomplex_manifold_solid_brep);
      SELF\data_quality_criterion_with_specification.assessment_method      : 
        shape_data_quality_assessment_by_single_numerical_test;
      SELF\data_quality_criterion_with_specification.
        measurement_requirement : solid_with_void_mr;
    WHERE
      WR1 : ('SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
            'INTEGER_VALUE_RANGE'
            IN TYPEOF(
               SELF\data_quality_criterion_with_specification.
               assessment_method.threshold)) AND
            ('MATHEMATICAL_FUNCTIONS_SCHEMA.' +
            'INTEGER_INTERVAL_FROM_MIN' 
            IN TYPEOF(
               SELF\data_quality_criterion_with_specification.
               assessment_method.threshold.range_component));
  END_ENTITY;

  ENTITY solid_with_void_mr
    SUBTYPE OF(overcomplex_manifold_solid_brep_mr);
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.INTEGER_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['GEOMETRIC_MODEL_SCHEMA.MANIFOLD_SOLID_BREP']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : NOT( 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.' +
                   'SHAPE_MEASUREMENT_REQUIREMENT_WITH_ACCURACY'
                  IN TYPEOF( SELF ) );
  END_ENTITY;

  FUNCTION report_for_data_quality_measurement
  (ei:shape_data_quality_measurement_requirement):
       BAG OF DATA_QUALITY_INSPECTION_REPORT;
       LOCAL
         bsdqc:BAG OF DATA_QUALITY_CRITERION_WITH_SPECIFICATION;
         dqir: BAG OF DATA_QUALITY_INSPECTION_RESULT := [];
         dirp: BAG OF DATA_QUALITY_INSPECTION_REPORT := [];
       END_LOCAL;
  
       -- Find all data_quality_criterion_with_specification
       -- for input shape_data_quality_measurement_requirement
       bsdqc := USEDIN(ei,
         'PRODUCT_DATA_QUALITY_CRITERIA_SCHEMA.'+
         'DATA_QUALITY_CRITERION_WITH_SPECIFICATION.'+
         'MEASUREMENT_REQUIREMENT');
  
       -- Find all data_quality_inspection_result
       -- for input shape_data_quality_measurement_requirement
       REPEAT i:= 0 TO SIZEOF(bsdqc);
         dqir := dqir + USEDIN(bsdqc[i],
           'PRODUCT_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
           'DATA_QUALITY_INSPECTION_RESULT.'+
           'CRITERION_INSPECTED');
       END_REPEAT;
  
       -- Find all data_quality_inspection_report
       -- for input shape_data_quality_measurement_requirement
       REPEAT i:= 0 TO SIZEOF(dqir);
         dirp := dirp + USEDIN(dqir[i],
           'PRODUCT_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
           'DATA_QUALITY_INSPECTION_REPORT.'+
           'INSPECTION_RESULT');
       END_REPEAT;
      RETURN(dirp);
  END_FUNCTION;

  FUNCTION validate_inspected_elements_type
    (ei:shape_data_quality_measurement_requirement;
     type_list:BAG OF STRING):LOGICAL;
     LOCAL
       sdir: BAG OF 
       SHAPE_DATA_QUALITY_INSPECTION_REPORT_FOR_INDIVIDUAL_ELEMENT;
       t_type_list:BAG OF STRING;
       result : LOGICAL;
     END_LOCAL;
     result := TRUE;
  
     -- Find all shape_data_quality_inspection_report_for_
     -- individual_element for input shape_data_quality_
     -- measurement_requirement
     sdir :=   QUERY(q <* report_for_data_quality_measurement(ei)|
     'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
     'SHAPE_DATA_QUALITY_INSPECTION_REPORT_FOR_INDIVIDUAL_ELEMENT'
     IN TYPEOF(q) );
  
     -- If there is no report, then true.
     IF(SIZEOF(sdir) = 0) THEN
       RETURN(TRUE);
     END_IF;
  
     -- When reports are exists, then perform checking process.
     REPEAT i:= 1 TO SIZEOF(sdir);
       -- If size of inspected_elements isn't same size of 
       -- type_list, then false.
       IF(SIZEOF(sdir[i].inspected_elements) <> 
          SIZEOF(type_list)) THEN
         RETURN(FALSE);
       END_IF;
       -- check all elements of type_lists 
       --  for each elements of inspected_elements.
       t_type_list := type_list;
       REPEAT j:= 1 TO SIZEOF(sdir[i].inspected_elements);
         REPEAT k:= 1 TO SIZEOF(t_type_list);
           IF(t_type_list[k] IN
              TYPEOF(sdir[i].inspected_elements[j])) THEN
            t_type_list := t_type_list - t_type_list[k];
            ESCAPE;
           END_IF;
         END_REPEAT;
       END_REPEAT;
       IF(SIZEOF(t_type_list) > 0) THEN
         RETURN(FALSE);
       END_IF;
     END_REPEAT;
  
     RETURN(result);
  END_FUNCTION;

  FUNCTION validate_locations_of_extreme_value_type
    (ei:shape_data_quality_measurement_requirement;
     type_list:BAG OF STRING):LOGICAL;
     LOCAL
       sdir: BAG OF
        REPORT_FOR_INDIVIDUAL_SHAPE_ELEMENT_WITH_EXTREME_INSTANCES;
       t_type_list:BAG OF STRING;
       result : LOGICAL;
     END_LOCAL;
     result := TRUE;
     -- Find all report_for_individual_shape
     -- _element_with_extreme_instances
     -- for input shape_data_quality_measurement_requirement
     sdir :=   QUERY(q <* report_for_data_quality_measurement(ei)|
     'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
     'REPORT_FOR_INDIVIDUAL_SHAPE_ELEMENT_WITH_EXTREME_INSTANCES'
     IN TYPEOF(q) );
  
     -- If there is no report, then true.
     IF(SIZEOF(sdir) = 0) THEN
       RETURN(TRUE);
     END_IF;
  
     -- If type_list is empty, then there should be no instances
     -- of report_for_individual_shape
     -- _element_with_extreme_instances.
     IF((SIZEOF(type_list) = 0) AND (SIZEOF(sdir) <> 0)) THEN
       RETURN(FALSE);
     END_IF;
  
     -- When reports are exists, then perform checking process.
     REPEAT i:= 1 TO SIZEOF(sdir);
       REPEAT j:= 1 TO SIZEOF(sdir[i].extreme_instances);
         -- If size of locations_of_extreme_value isn't same size
         -- of type_list, then false.
         IF(SIZEOF(sdir[i].extreme_instances[j].
                           locations_of_extreme_value) <>
            SIZEOF(type_list)) THEN
            RETURN(FALSE);
         END_IF;
         t_type_list := type_list;
         -- check all elements of type_lists 
         --  for each elements of locations_of_extreme_value.
         REPEAT k:= 1 TO SIZEOF(sdir[i].extreme_instances[j]
                                  .locations_of_extreme_value);
           REPEAT l:= 1 TO SIZEOF(t_type_list);
             IF(t_type_list[l] IN
               TYPEOF(sdir[i].extreme_instances[j].
                       locations_of_extreme_value[k])) THEN
               t_type_list := t_type_list - t_type_list[l];
               ESCAPE;
             END_IF;
           END_REPEAT;
         END_REPEAT;
         IF(SIZEOF(t_type_list) > 0) THEN
           RETURN(FALSE);
         END_IF;
       END_REPEAT;
     END_REPEAT;
  
     RETURN(result);
  
  END_FUNCTION;

  FUNCTION validate_measured_data_type
    (ei:shape_data_quality_measurement_requirement;
     type_string: STRING):LOGICAL;
     LOCAL
       sdie: BAG OF
        SHAPE_DATA_QUALITY_INSPECTION_REPORT_FOR_INDIVIDUAL_ELEMENT;
       sdsr: BAG OF
        SHAPE_DATA_QUALITY_INSPECTION_SUMMARY_REPORT;
       sdir: BAG OF
        REPORT_FOR_INDIVIDUAL_SHAPE_ELEMENT_WITH_EXTREME_INSTANCES;
     END_LOCAL;
  
     -- Find all shape_data_quality_inspection_summary_report
     -- for input shape_data_quality_measurement_requirement
     sdsr :=   QUERY(q <* report_for_data_quality_measurement(ei)|
       'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
       'SHAPE_DATA_QUALITY_INSPECTION_SUMMARY_REPORT'
       IN TYPEOF(q) );
  
     -- Find all shape_data_quality_inspection_report_for_
     -- individual_element for input shape_data_quality_
     -- measurement_requirement
     sdie :=   QUERY(q <* report_for_data_quality_measurement(ei)|
       'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
       'SHAPE_DATA_QUALITY_INSPECTION_REPORT_FOR_INDIVIDUAL_ELEMENT'
       IN TYPEOF(q) );
  
     -- Find all report_for_individual_shape
     -- _element_with_extreme_instances
     -- for input shape_data_quality_measurement_requirement
     sdir :=   QUERY(q <* report_for_data_quality_measurement(ei)|
     'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
     'REPORT_FOR_INDIVIDUAL_SHAPE_ELEMENT_WITH_EXTREME_INSTANCES'
     IN TYPEOF(q) );
  
     -- If there is no report, then true.
     IF((SIZEOF(sdie) = 0) AND (SIZEOF(sdsr) = 0)
           AND (SIZEOF(sdir) = 0)) THEN
       RETURN(TRUE);
     END_IF;
  
     -- When reports are exists, then perform checking process.
     -- Check representative_measured_value of shape_data_quality
     -- _inspection_summary_report
     REPEAT i:= 1 TO SIZEOF(sdsr);
      IF(NOT(type_string IN
         TYPEOF(sdsr[i].representative_measured_value))) THEN
         RETURN(FALSE);
       END_IF;
     END_REPEAT;
  
     -- Check measured_value of shape_data_quality_inspection_
     -- report_for_individual_element
     REPEAT i:= 1 TO SIZEOF(sdie);
       IF(NOT(type_string IN
         TYPEOF(sdie[i].measured_value))) THEN
         RETURN(FALSE);
       END_IF;
     END_REPEAT;
  
     -- Check measured_value of extreme_instance of 
     -- report_for_individual_shape
     -- _element_with_extreme_instances
     REPEAT i:= 1 TO SIZEOF(sdir);
       REPEAT j:= 1 TO SIZEOF(sdir[i].extreme_instances);
         IF(NOT(type_string IN
           TYPEOF(sdie[i].extreme_instances[j].measured_value)))
         THEN
           RETURN(FALSE);
         END_IF;
       END_REPEAT;
     END_REPEAT;
  
     RETURN(TRUE);
  
  END_FUNCTION;

END_SCHEMA;



SCHEMA SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA;
  REFERENCE FROM PRODUCT_DATA_QUALITY_INSPECTION_RESULT_SCHEMA
    (data_quality_inspection_result_representation,
     data_quality_inspection_result,
     data_quality_inspection_summary_report,
     data_quality_inspection_report_for_individual_element,
     data_quality_inspected_product_data_and_result_relationship);
  REFERENCE FROM SHAPE_DATA_QUALITY_CRITERIA_SCHEMA
    (shape_measurement_accuracy,  shape_data_quality_criterion);
  REFERENCE FROM MEASURE_SCHEMA
    (parameter_value, named_unit, measure_with_unit,
     plane_angle_measure_with_unit);
  REFERENCE FROM TOPOLOGY_SCHEMA
    (oriented_edge,
     edge_loop,
     edge_curve,
     face_surface,
     connected_face_set,
     vertex_point,
     closed_shell,
     open_shell);
  REFERENCE FROM GEOMETRY_SCHEMA
    (composite_curve,
     b_spline_curve,
     rectangular_composite_surface,
     b_spline_surface,
     curve,
     surface,
     point_on_curve,
     point_on_surface,
     point);
  REFERENCE FROM GEOMETRIC_MODEL_SCHEMA (manifold_solid_brep);
  REFERENCE FROM PRODUCT_PROPERTY_REPRESENTATION_SCHEMA
    (shape_representation,
     shape_representation_relationship,
     shape_definition_representation);
  REFERENCE FROM PRODUCT_DEFINITION_SCHEMA
    (product_definition);
  REFERENCE FROM PRODUCT_PROPERTY_DEFINITION_SCHEMA
    (product_definition_shape);
  REFERENCE FROM REPRESENTATION_SCHEMA
    (founded_item_select, founded_item, representation_item,
     using_representations);
  REFERENCE FROM SUPPORT_RESOURCE_SCHEMA (bag_to_set);

  TYPE measured_value_select = SELECT
    (boolean_value,
     integer_value,
     parameter_value,
     measure_with_unit,
     plane_angle_and_curvature_pair);
  END_TYPE;

  TYPE integer_value = INTEGER;
  END_TYPE;

  TYPE boolean_value = BOOLEAN;
  END_TYPE;

  TYPE location_of_extreme_value_select = SELECT
    (inspected_shape_element_select,
     b_spline_surface_knot_locator,
     b_spline_curve_knot_locator,
     b_spline_curve_segment,
     b_spline_surface_strip,
     b_spline_surface_patch,
     point_on_curve,
     point_on_surface,
     composite_curve_transition_locator,
     rectangular_composite_surface_transition_locator,
     boundary_curve_of_b_spline_or_rectangular_composite_surface,
     oriented_edge);
  END_TYPE;

  TYPE inspected_shape_element_select = SELECT
    (edge_loop,
     edge_curve,
     face_surface,
     curve,
     surface,
     vertex_point,
     closed_or_open_shell_select,
     manifold_object_select,
     b_spline_or_rectangular_composite_surface_select,
     point);
  END_TYPE;

  TYPE closed_or_open_shell_select = SELECT
    (closed_shell,
     open_shell);
  END_TYPE;

  TYPE manifold_object_select = SELECT
    (connected_face_set,
     manifold_solid_brep);
  END_TYPE;

  TYPE b_spline_or_rectangular_composite_surface_select = SELECT
    (b_spline_surface,
     rectangular_composite_surface);
  END_TYPE;

  TYPE u_or_v_parameter = ENUMERATION OF
    (U_PARAMETER,
     V_PARAMETER);
  END_TYPE;

  TYPE surface_boundary_type = ENUMERATION OF
    (U_PARAMETER_MIN,
     V_PARAMETER_MIN,
     U_PARAMETER_MAX,
     V_PARAMETER_MAX);
  END_TYPE;

  ENTITY shape_data_quality_inspection_result_representation
    SUBTYPE OF(data_quality_inspection_result_representation);
    WHERE
      WR1 : SIZEOF( QUERY( q <* SELF\representation.items|
                               'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.' +
                               'SHAPE_DATA_QUALITY_INSPECTION_RESULT'
                               IN TYPEOF(q))) > 0;
      WR2 : 'GEOMETRY_SCHEMA.GEOMETRIC_REPRESENTATION_CONTEXT' IN
             TYPEOF(SELF\representation.context_of_items);
  END_ENTITY;

  ENTITY shape_inspection_result_representation_with_accuracy
    SUBTYPE OF(shape_data_quality_inspection_result_representation);
      applied_general_accuracy : SET [1:?] OF shape_measurement_accuracy;
  END_ENTITY;

  ENTITY shape_data_quality_inspected_shape_and_result_relationship
    SUBTYPE OF(shape_representation_relationship);
      SELF\representation_relationship.rep_1 :
            shape_data_quality_inspection_result_representation;
      SELF\representation_relationship.rep_2 : 
            shape_representation;
    WHERE
      WR1 : SIZEOF(
           using_product_definition_of_shape_representation(SELF.rep_2)
            *
           product_definition_of_inspection_result_representation(SELF.rep_1)
            ) > 0;
      WR2 : SELF.rep_1\representation.context_of_items :=: 
             SELF.rep_2\representation.context_of_items;
  END_ENTITY;

  ENTITY shape_data_quality_inspection_result
    SUBTYPE OF(data_quality_inspection_result);
    WHERE
      WR1 : 'SHAPE_DATA_QUALITY_CRITERIA_SCHEMA.'+
            'SHAPE_DATA_QUALITY_CRITERION' IN TYPEOF
            (SELF\data_quality_inspection_result.criterion_inspected);
  END_ENTITY;

  ENTITY shape_data_quality_inspection_summary_report
    SUBTYPE OF(data_quality_inspection_summary_report);
      representative_measured_value : measured_value_select;
  END_ENTITY;

  ENTITY shape_inspection_summary_report_with_accuracy
    SUBTYPE OF(shape_data_quality_inspection_summary_report);
      applied_specific_accuracy : shape_measurement_accuracy;
  END_ENTITY;

  ENTITY shape_data_quality_inspection_report_for_individual_element
    SUBTYPE OF(data_quality_inspection_report_for_individual_element);
      inspected_elements : SET [1:?] OF inspected_shape_element_select;
      measured_value     : measured_value_select;
  END_ENTITY;

  ENTITY report_for_individual_shape_element_with_extreme_instances
    SUBTYPE OF(shape_data_quality_inspection_report_for_individual_element);
      extreme_instances : SET [1:?] OF extreme_instance;
  END_ENTITY;

  ENTITY extreme_instance;
      locations_of_extreme_value : 
         SET [1:?] OF location_of_extreme_value_select;
      measured_value             : measured_value_select;
  END_ENTITY;

  ENTITY point_on_edge_curve
    SUBTYPE OF(point_on_curve);
      basis_edge_curve : edge_curve;
    WHERE
      WR1 : SIZEOF(
            using_representations(SELF.basis_edge_curve) *
            relating_shape_representations_of_extreme_values(SELF))>0;
  END_ENTITY;

  ENTITY point_on_face_surface
    SUBTYPE OF(point_on_surface);
      basis_face_surface : face_surface;
    WHERE
      WR1 : SIZEOF(
            using_representations(SELF.basis_face_surface) *
            relating_shape_representations_of_extreme_values(SELF))>0;
  END_ENTITY;

  ENTITY curvature_measure_with_unit
    SUBTYPE OF(measure_with_unit);
    WHERE
      WR1 : 'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.'+
            'CURVATURE_UNIT' IN TYPEOF
            (SELF\measure_with_unit.unit_component);
  END_ENTITY;

  ENTITY curvature_unit
    SUBTYPE OF(named_unit);
    WHERE
      WR1 : (SELF\named_unit.dimensions.length_exponent = -1.0) AND
            (SELF\named_unit.dimensions.mass_exponent = 0.0) AND
            (SELF\named_unit.dimensions.time_exponent = 0.0) AND
            (SELF\named_unit.dimensions.electric_current_exponent = 0.0) AND
            (SELF\named_unit.dimensions.thermodynamic_temperature_exponent = 0.0) AND
            (SELF\named_unit.dimensions.amount_of_substance_exponent = 0.0) AND
            (SELF\named_unit.dimensions.luminous_intensity_exponent = 0.0);
  END_ENTITY;

  ENTITY plane_angle_and_curvature_pair;
      curvature_value   : curvature_measure_with_unit;
      plane_angle_value : plane_angle_measure_with_unit;
  END_ENTITY;

  ENTITY b_spline_surface_knot_locator
    SUBTYPE OF(founded_item);
      basis_surface     : b_spline_surface;
      knot_index        : INTEGER;
      surface_parameter : u_or_v_parameter;
    WHERE
      WR1 : SIZEOF(
            using_representations(SELF.basis_surface) *
            relating_shape_representations_of_extreme_values(SELF))>0;
  END_ENTITY;

  ENTITY b_spline_surface_patch
    SUBTYPE OF(founded_item);
      basis_surface      : b_spline_surface;
      u_start_knot_index : INTEGER;
      v_start_knot_index : INTEGER;
    WHERE
      WR1 : SIZEOF(
            using_representations(SELF.basis_surface) *
            relating_shape_representations_of_extreme_values(SELF))>0;
  END_ENTITY;

  ENTITY b_spline_curve_knot_locator
    SUBTYPE OF(founded_item);
      basis_curve : b_spline_curve;
      knot_index  : INTEGER;
    WHERE
      WR1 : SIZEOF(
            using_representations(SELF.basis_curve) *
            relating_shape_representations_of_extreme_values(SELF))>0;
  END_ENTITY;

  ENTITY b_spline_curve_segment
    SUBTYPE OF(founded_item);
      basis_curve      : b_spline_curve;
      start_knot_index : INTEGER;
    WHERE
      WR1 : SIZEOF(
            using_representations(SELF.basis_curve) *
            relating_shape_representations_of_extreme_values(SELF))>0;
  END_ENTITY;

  ENTITY b_spline_surface_strip
    SUBTYPE OF(founded_item);
      basis_surface     : b_spline_surface;
      start_knot_index  : INTEGER;
      surface_parameter : u_or_v_parameter;
    WHERE
      WR1 : SIZEOF(
            using_representations(SELF.basis_surface) *
            relating_shape_representations_of_extreme_values(SELF))>0;
  END_ENTITY;

  ENTITY composite_curve_transition_locator
    SUBTYPE OF(founded_item);
      basis_curve      : composite_curve;
      transition_index : INTEGER;
    WHERE
      WR1 : SIZEOF(
            using_representations(SELF.basis_curve) *
            relating_shape_representations_of_extreme_values(SELF))>0;
  END_ENTITY;

  ENTITY rectangular_composite_surface_transition_locator
    SUBTYPE OF(founded_item);
      basis_surface      : rectangular_composite_surface;
      surface_parameter  : u_or_v_parameter;
      u_transition_index : INTEGER;
      v_transition_index : INTEGER;
    WHERE
      WR1 : SIZEOF(
            using_representations(SELF.basis_surface) *
            relating_shape_representations_of_extreme_values(SELF))>0;
  END_ENTITY;

  ENTITY boundary_curve_of_b_spline_or_rectangular_composite_surface
    SUBTYPE OF(founded_item);
      basis_surface : b_spline_or_rectangular_composite_surface_select;
      boudary_type  : surface_boundary_type;
    WHERE
      WR1 : SIZEOF(
            using_representations(SELF.basis_surface) *
            relating_shape_representations_of_extreme_values(SELF))>0;
  END_ENTITY;

  FUNCTION product_definition_of_inspection_result_representation
    (item:shape_data_quality_inspection_result_representation)
      : SET OF product_definition;
  LOCAL
    local_d_q_r: SET OF
       data_quality_inspected_product_data_and_result_relationship := [];
    local_p_d: SET OF product_definition := [];
    i : INTEGER;
  END_LOCAL;
  
  -- find data_quality_inspected_product_data_and_result_relationship 
    local_d_q_r  := local_d_q_r + bag_to_set (USEDIN (item, 
   'PRODUCT_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.' +
   'DATA_QUALITY_INSPECTED_PRODUCT_DATA_AND_RESULT_RELATIONSHIP.'+
   'INSPECTION_RESULT_REPRESENTATION')); 
  
  -- find product_definitions
  REPEAT i := 1 TO HIINDEX (local_d_q_r);
   local_p_d := local_p_d + local_d_q_r[i].inspected_product_definition;
  END_REPEAT;
  RETURN (local_p_d);
  END_FUNCTION;

  FUNCTION relating_shape_representations_of_extreme_values
  (item:location_of_extreme_value_select)
   : SET OF shape_representation;
  
  LOCAL
    results   : SET OF shape_representation;
    exti      : SET OF extreme_instance;
    sdqir_ei  : SET OF 
         report_for_individual_shape_element_with_extreme_instances;
    sdqr      : SET OF 
         shape_data_quality_inspection_result_representation;
    sdisr     : SET OF 
         shape_data_quality_inspected_shape_and_result_relationship;
  END_LOCAL;
  
  -- find extreme_instance 
  exti := [];
  exti := exti + 
     bag_to_set( USEDIN(item,
       'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.' +
       'EXTREME_INSTANCE.'+
       'LOCATIONS_OF_EXTREME_VALUE')); 
  
  -- find report_for_individual_shape_element_with_extreme_instances 
  sdqir_ei := [];
  REPEAT i := 1 TO HIINDEX (exti);
    sdqir_ei := sdqir_ei + 
      bag_to_set( USEDIN(item,
        'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.' +
        'REPORT_FOR_INDIVIDUAL_SHAPE_ELEMENT_WITH_EXTREME_INSTANCES.'+
        'EXTREME_INSTANCES')); 
  END_REPEAT;
  
  -- find shape_data_quality_inspection_result_representation
  sdqr := [];
  REPEAT i := 1 TO HIINDEX (sdqir_ei);
   sdqr := sdqr + 
     bag_to_set( USEDIN(sdqir_ei[i].inspection_result,
       'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.' +
       'SHAPE_DATA_QUALITY_INSPECTION_RESULT_REPRESENTATION.'+
       'ITEMS')); 
  END_REPEAT;
  
  -- find shape_data_quality_inspected_shape_and_result_relationship
  sdisr := [];
  REPEAT i := 1 TO HIINDEX (sdqr);
    sdisr := sdisr +  bag_to_set(USEDIN(sdqr[i],
       'SHAPE_DATA_QUALITY_INSPECTION_RESULT_SCHEMA.' +
       'SHAPE_DATA_QUALITY_INSPECTED_SHAPE_AND_RESULT_RELATIONSHIP.'+
       'REP_1')); 
  END_REPEAT;
  
  -- find shape_representation
  results := [];
  REPEAT i := 1 TO HIINDEX (sdisr);
    results := results + sdisr[i].rep_2;
  END_REPEAT;
  
  RETURN (results);
  END_FUNCTION;

  FUNCTION using_product_definition_of_shape_representation
  (item: shape_representation) : SET OF product_definition;
  LOCAL
    local_s_d_r: SET OF shape_definition_representation := [];
    local_p_d_s: SET OF product_definition_shape := [];
    local_p_d: SET OF product_definition := [];
    i : INTEGER;
  END_LOCAL;
  
  -- find shape_definition_representations 
    local_s_d_r  := local_s_d_r + bag_to_set (USEDIN (item, 
   'PRODUCT_PROPERTY_REPRESENTATION_SCHEMA.' +
   'SHAPE_DEFINITION_REPRESENTATION.USED_REPRESENTATION')); 
  
  -- find product_definition_shape & product_definitions
  REPEAT i := 1 TO HIINDEX (local_s_d_r);
     IF (('PRODUCT_PROPERTY_DEFINITION_SCHEMA.PRODUCT_DEFINITION_SHAPE' IN 
       TYPEOF (local_s_d_r[i].definition))
       AND
       ('PRODUCT_DEFINITION_SCHEMA.PRODUCT_DEFINITION' IN TYPEOF
         (local_s_d_r[i].definition.definition))) 
     THEN local_p_d := local_p_d + local_s_d_r[i].definition.definition;
     ELSE IF (('PRODUCT_PROPERTY_DEFINITION_SCHEMA.PROPERTY_DEFINITION' IN 
       TYPEOF (local_s_d_r[i].definition))
       AND
       ('PRODUCT_DEFINITION_SCHEMA.PRODUCT_DEFINITION' IN TYPEOF
         (local_s_d_r[i].definition.definition)))
     THEN local_p_d := local_p_d + local_s_d_r[i].definition.definition;
     END_IF;
     END_IF;
  END_REPEAT;
  RETURN (local_p_d);
  END_FUNCTION;

END_SCHEMA;
